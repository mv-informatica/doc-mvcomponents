{"version":3,"sources":["../src/input/abstract/a-text-input.ts"],"names":[],"mappings":";;;IAMA;QAAyC,sCAAc;QAAvD;YAAA,qEA4GC;YA3GW,mBAAa,GAAY,KAAK,CAAC;YAC/B,cAAQ,GAAY,KAAK,CAAC;;QA0GtC,CAAC;QAlGG,4BAAO,GAAP,UAAQ,IAAY;YAChB,IAAI,CAAC,QAAQ,EAAE,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YAC3B,MAAM,CAAC,IAAI,CAAC;QAChB,CAAC;QAUD,qCAAgB,GAAhB,UAAiB,EAAW;YACxB,IAAI,CAAC,aAAa,GAAG,EAAE,CAAC;YACxB,MAAM,CAAC,IAAI,CAAC;QAChB,CAAC;QAOD,oCAAe,GAAf;YACI,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC;QAC9B,CAAC;QASD,gCAAW,GAAX,UAAY,EAAW;YACnB,IAAI,CAAC,QAAQ,GAAG,EAAE,CAAC;YACnB,MAAM,CAAC,IAAI,CAAC;QAChB,CAAC;QAOD,+BAAU,GAAV;YACI,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC;QACzB,CAAC;QAQD,6BAAQ,GAAR;YACI,IAAI,KAAK,GAAG,iBAAM,QAAQ,WAAE,CAAC;YAC7B,MAAM,CAAC,KAAK,IAAI,CAAC,IAAI,CAAC,eAAe,EAAE,GAAG,EAAE,GAAG,IAAI,CAAC,CAAC;QACzD,CAAC;QAMD,gCAAW,GAAX;YACI,MAAM,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC,GAAG,EAAE,CAAC;QACjC,CAAC;QAOD,gCAAW,GAAX,UAAY,KAAa;YACrB,EAAE,CAAA,CAAC,KAAK,KAAK,IAAI,IAAI,IAAI,CAAC,UAAU,EAAE,CAAC,CAAA,CAAC;gBACpC,IAAI,CAAC,QAAQ,EAAE,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;YAChC,CAAC;YAAA,IAAI,CAAA,CAAC;gBACF,IAAI,CAAC,QAAQ,EAAE,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;YAC/B,CAAC;YACD,MAAM,CAAC,IAAI,CAAC;QAChB,CAAC;QAOD,iCAAY,GAAZ,UAAa,KAAY;YACrB,IAAI,CAAC,QAAQ,EAAE,CAAC,IAAI,CAAC,WAAW,EAAC,KAAK,CAAC,CAAC;YACxC,MAAM,CAAC,IAAI,CAAC;QAChB,CAAC;QAES,2BAAM,GAAhB,UAAiB,KAAa;YAC1B,MAAM,CAAC,KAAK,CAAC;QACjB,CAAC;QAES,2BAAM,GAAhB,UAAiB,KAAa;YAC1B,MAAM,CAAC,KAAK,CAAC;QACjB,CAAC;QACL,iBAAC;IAAD,CA5GA,AA4GC,CA5GwC,gBAAM,GA4G9C;IA5GqB,gCAAU","file":"a-text-input.js","sourcesContent":["import {AInput} from './a-input'\n\n/**\n * @abstract\n * @extends {AInput}\n */\nexport abstract class ATextInput extends AInput<string> {\n    private blankWhenNull: boolean = false;\n    private nullable: boolean = false;\n\n    /**\n     * Informa a mascara que será utilizada pelo input\n     *  \n     * @param {string} mask\n     * @returns {this}\n     */\n    setMask(mask: string): this {\n        this.getInput().mask(mask);\n        return this;\n    }\n\n    /**\n     * Caso o valor `true` seja informado, ao executar o `getValue()` \n     * será retornado uma string vazia quando o campo estiver vazio.\n     * Do contrário, será retornado `null`. \n     * \n     * @param {boolean} on\n     * @returns {this}\n     */\n    setBlankWhenNull(on: boolean): this {\n        this.blankWhenNull = on;\n        return this;\n    }\n\n    /**\n     * Retorna o valor alterado, caso tenha executado o 'setBlankWhenNull(on)'.\n     * \n     * @returns {boolean}\n     */\n    isBlankWhenNull(): boolean {\n        return this.blankWhenNull;\n    }\n\n    /**\n     * Caso seja informado `true` o campo irá assumir 'null' como valor quando\n     * `setValue(null)` for executado. \n     * \n     * @param {boolean} on\n     * @returns {this}\n     */\n    setNullable(on: boolean): this {\n        this.nullable = on;\n        return this;\n    }\n\n    /**\n     * Retorna `true` caso o campo aceite 'null' como valor \n     * \n     * @returns {boolean}\n     */\n    isNullable(): boolean {\n        return this.nullable;\n    }\n\n    /**\n     * Obtém o valor atual do componente. \n     * O método `setBlankWhenNull` pode fazer com que a resposta varie   \n     * \n     * @returns {string}\n     */\n    getValue(): string {\n        let value = super.getValue();\n        return value || (this.isBlankWhenNull() ? '' : null);\n    }\n\n    /**\n     * \n     * @returns {string}\n     */\n    getRawValue(): string {\n        return this.getInput().val();\n    }\n\n    /**\n     * \n     * @param {string} value\n     * @returns {this}\n     */\n    setRawValue(value: string): this {\n        if(value === null && this.isNullable()){\n            this.getInput().val('null');\n        }else{\n            this.getInput().val(value);     \n        }       \n        return this;\n    }\n\n    /**\n     * \n     * @param {number} value\n     * @returns {this}\n     */\n    setMaxLength(value:number):this{\n        this.getInput().attr(\"maxlength\",value);\n        return this;\n    }\n    \n    protected decode(value: string): string {\n        return value;\n    }\n\n    protected encode(value: string): string {\n        return value;\n    }\n}\n"]}