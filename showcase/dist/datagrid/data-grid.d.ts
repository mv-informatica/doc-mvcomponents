
import { EventEmitter } from "../core/event-emitter";
import { EGridStyle } from "./enum/e-data-grid";
import { IDataGrid, IDataGridColumn } from "./interface/i-data-grid";
import { ABasicComponent } from "../component/abstract/a-basic-component";
export declare class DataGrid<T> extends ABasicComponent implements IDataGrid<T> {
    private columns;
    private data;
    private styles;
    private selectedData;
    private singleSelection;
    private infiniteScroll;
    private emptyText;
    private sortingColumns;
    private blocked;
    private height;
    private size;
    private defaultHeight;
    private bottom;
    onItemChecked: EventEmitter<T>;
    onItemUnChecked: EventEmitter<T>;
    onItemCheckeds: EventEmitter<boolean>;
    onItemSelect: EventEmitter<T>;
    onSortingChange: EventEmitter<IDataGridColumn<T>[]>;
    onScrollBottom: EventEmitter<any>;
    onDoubleClick: EventEmitter<T>;
    private autoSort;
    private gridRendered;
    private tableRendered;
    private gridHeaderRendered;
    constructor(config?: {
        autoSort?: boolean;
    });
    addTableStyle(...style: EGridStyle[]): this;
    setData(data: T[]): this;
    addData(data: T[]): this;
    setEmptyText(text: string): this;
    clearSelection(): this;
    selectAll(): this;
    setSelectedIndexes(indexs: number[]): this;
    addSelectedIndexes(indexs: number[]): this;
    setSingleSelection(yes: boolean): this;
    isSingleSelection(): boolean;
    setColumns(columns: IDataGridColumn<T>[]): this;
    setHeight(height: number): this;
    getHeight(): number;
    setInfiniteScroll(isInfiniteScroll: boolean): this;
    isInfiniteScroll(): boolean;
    getEmptyText(): string;
    clear(): this;
    getStyle(): string;
    setSelectedIndex(index: number): this;
    getSelectedItems(): T[];
    getData(): T[];
    getColumns(): IDataGridColumn<T>[];
    attached(): void;
    setBottom(bottom: number): this;
    setCheckeds(pindexes: number[]): this;
    getCheckeds(): T[];
    getCheckedsIndexes(): number[];
    private refreshRender();
    private verifyScroll();
    private getValueByPath(item, path);
    refresh(): this;
    block(block: boolean): this;
    private addSort(index, asc);
    private selectRow(index, isDbClick?);
    private getInfiniteScrollClass();
}
