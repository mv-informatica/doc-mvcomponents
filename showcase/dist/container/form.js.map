{"version":3,"sources":["../src/container/form.ts"],"names":[],"mappings":"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","file":"form.js","sourcesContent":["import {AContainer} from \"./abstract/a-container\";\r\nimport {IChart} from \"../chart/interface/i-chart\";\r\nimport {IWidget} from \"../widget/interface/i-widget\";\r\nimport {IButton} from \"../button/interface/i-button\";\r\nimport {ToolBar} from \"./toolbar\";\r\nimport {ButtonGroup} from \"./button-group\";\r\nimport {ICustomComponent} from \"../core/interface/i-custom-component\";\r\nimport {IVisualComponent} from \"../component/interface/i-visual-component\";\r\nimport {AVisualComponent} from \"../component/abstract/a-visual-component\";\r\nimport {IBlockContainer} from \"./interface/i-block-container\";\r\nimport {IRenderable} from \"../core/interface/i-renderable\";\r\nimport {IInput} from \"../input/interface/i-input\";\r\nimport {AInput} from \"../input/abstract/a-input\";\r\nimport {Select} from \"../input/select\";\r\nimport {Chooser} from \"../input/chooser\";\r\nimport {EventEmitter} from \"../core/event-emitter\";\r\nimport {EInputEvent} from \"../component/enum/e-input-event\";\r\nimport {IDataGrid} from \"../datagrid/interface/i-data-grid\";\r\nimport {Fieldset} from \"./fieldset\";\r\nimport jquery = require(\"jquery\");\r\n\r\nexport type IFormItem = IWidget | IButton | IInput<any> | ToolBar | ButtonGroup | ICustomComponent | Fieldset | IDataGrid<any>;\r\n\r\nexport interface IValidationResponse {\r\n\tinput: IInput<any>;\r\n\terrors: string[];\r\n}\r\n\r\nexport interface ISelectInput extends IInput<any>{\r\n\tsetAssignedProperty(): string;\r\n\tgetAssignedProperty(): string;\r\n\tgetData():any[];\r\n\tsetValueForm(data:any):void;\r\n}\r\n/**\r\n * <img width=\"100%\" src=\"../../doc_assets/form_example_1.png\">\r\n * \r\n * A finalidade deste container é facilitar o trabalho com estruturas de formulários.\r\n * Possui métodos auxiliares que facilitam o gerenciamento dos componentes a ele adicionados, para isto\r\n * deve ser estendida pela classe final e cada campo que se deseje gerenciar deve ser uma propriedade da classe.\r\n * \r\n * @export\r\n * @memberof module:mvcomponents/container\r\n * \r\n * @example\r\n * import {Button} from \"mvcomponents/button\";\r\n * import {EMouseEvent} from \"mvcomponents/component\";\r\n * import {Form} from \"mvcomponents/container\";\r\n * import {TextInput, PassWordInput} from \"mvcomponents/input\";\r\n *\r\n * export interface IDadosDeLogin {\r\n *     login: string;\r\n *     senha: string;\r\n * }\r\n *\r\n * export class LoginForm extends Form<IDadosDeLogin>{\r\n *\r\n *  private txtLogin: TextInput;\r\n *  private txtSenha: PassWordInput;\r\n *  private btnOK: Button;\r\n *\r\n *  constructor () {\r\n *      super();\r\n *      this.txtLogin = new TextInput(\"login\");\r\n *      this.txtLogin.setLabel(\"Login\");\r\n *      this.txtLogin.setName(\"login\");\r\n *      this.txtLogin.setSize(12);\r\n *\r\n *      this.txtSenha = new PassWordInput(\"senha\");\r\n *      this.txtSenha.setLabel(\"Senha\");\r\n *      this.txtSenha.setName(\"senha\");\r\n *      this.txtSenha.setSize(12);\r\n *\r\n *      this.btnOK = new Button(\"OK\");\r\n *      this.btnOK.addEvent(EMouseEvent.CLICK, evt => this.validar());\r\n *      this.btnOK.setSize(12);\r\n *\r\n *      this.append(this.txtLogin);\r\n *      this.append(this.txtSenha);\r\n *      this.append(this.btnOK);\r\n *  }\r\n *\r\n * }\r\n * //arquivo main.ts\r\n *  import {Button} from \"mvcomponents/button\";\r\n *  import {EMouseEvent} from \"mvcomponents/component\";\r\n *  import {TextInput, PassWordInput} from \"mvcomponents/input\";\r\n *  import {ViewPager, Box, Form} from \"mvcomponents/container\";\r\n *  import {LoginForm} from \"./login-form\";\r\n *\r\n *\r\n *  let boxContainer:Box = new Box();\r\n *  let form:LoginForm = new LoginForm();\r\n *  form.setSize(12);\r\n *  boxContainer.append(form);\r\n *  boxContainer.setSize(4);\r\n *\r\n *  let page:ViewPager = new ViewPager();\r\n *  page.append(boxContainer);\r\n *  page.appendTo(\"#conteudo\");\r\n *  ....\r\n *  //recuperando dados do formulário após validação\r\n *  form\r\n *     .validate()\r\n *     .then(errs=>{\r\n *         console.log(form.getData())   \r\n *     })\r\n *\r\n */\r\nexport class Form<T> extends AContainer<IFormItem> {\r\n\tprivate _inputs:{name:string,input:ISelectInput}[];\r\n\t/**\r\n\t* Evento disparado toda vez que o formulário é validado com o metodo {Form.validate}\r\n\t* @example\r\n\t* let form = new Form();\r\n\t* form.append(new InputText());\r\n\t* form.onValidate.subscribe(()=>console.log('formulário válido'));\r\n\t* form.validate();\r\n\t*\r\n\t*/\r\n\tpublic onValidate: EventEmitter<IValidationResponse[]> = new EventEmitter<IValidationResponse[]>();\r\n\tprivate data:T;\r\n\tconstructor() {\r\n\t\tsuper(\"div\", \"\");\r\n\t\tthis.addStyleName(\"Form\");\r\n\t\tthis._inputs = [];\r\n\t\tthis.data = <any>{};\r\n\t}\r\n\tpublic get inputs(){\r\n\t\treturn this._inputs.concat([]);\r\n\t}\r\n\tprotected insertItem(element: IFormItem, method: string): void {\r\n\t\tlet input = <ISelectInput>element;\r\n\t\tlet name:string = input.getName && input.getName();\r\n\t\tif (name) {\r\n\t\t\tthis._inputs.push({name:name,input:input});\r\n\t\t}else if((<Fieldset>element).isFieldset){\r\n\t\t\tthis._inputs.push(...(<any>element).inputs);\r\n\t\t}\r\n\t\tsuper.insertItem(element, method);\r\n\t}\r\n\r\n\t/**\r\n\t * Limpa visualmente todos os campos do formulario que estejam marcado como 'cleanable', mas não seta o valor default de cada campo.\r\n\t * @see {@link Form.reset}\r\n\t * @return {Form}\r\n\t */\r\n\tpublic clear(): Form<T> {\r\n\t\tthis.data = <T>jquery.extend(true,{},null);\r\n\t\tthis._inputs.forEach(field =>{ \r\n\t\t\tif(field.input.isCleanable()){\r\n\t\t\t\tfield.input.setDirty(false).setValue(null).markInvalid(false);\r\n\t\t\t}\r\n\t\t});\r\n\t\treturn this;\r\n\t}\r\n\r\n\t/**\r\n\t * Verifica a ultima validação dos métodos {@link IInput.isValid} e {@link IInput.isTransient} de cada um dos\r\n\t * campos adicionados ao formulário.\r\n\t * @see {@link IInput.isValid}\r\n\t * @see {@link IInput.isTransient}\r\n\t * @return {boolean}\r\n\t */\r\n\tpublic isValid(): boolean {\r\n\t\treturn this._inputs.every(field => field.input.isValid()); \r\n\t}\r\n\r\n\t/**\r\n\t * Dispara a validação do formulário retornando uma Promise após a sua conclusão.\r\n\t * Para que essa validação funcione corretamente é necessário que os campos possuam um nome estabelecido com o método 'setName'.\r\n\t * @example \r\n\t * let form = new Form();\r\n\t * form.append(new InputText().setName('field1'));\r\n\t * form\r\n\t *     .validate()\r\n\t *     .then(()=>console.log('all ok'))\r\n\t *     .catch(errs=>console.log(errs)); \r\n\t *\r\n\t * @see {@link Form.onValidate}\r\n\t * @return {Promise}\r\n\t */\r\n\tpublic validate(): Promise<IValidationResponse[]> {\r\n\t\tlet validations = this._inputs\r\n\t\t\t.map(field => {\r\n\t\t\t\treturn field.input\r\n\t\t\t\t\t.setDirty(true)\r\n\t\t\t\t\t.validate()\r\n\t\t\t\t\t.then(errors => <IValidationResponse>{input:field.input ,errors:errors })\r\n\t\t\t\t\t.catch(errors => <IValidationResponse>{input:field.input ,errors:errors });\r\n\t\t\t});\r\n\t\treturn new Promise((sucess,fail)=>{\r\n\t\t\tlet validation:any[];\r\n\t\t\tPromise.all<IValidationResponse>(validations)\r\n\t\t\t.then(errors => {\r\n\t\t\t\tlet validation = errors.filter(error => error.errors.length > 0);  \r\n\t\t\t\tthis.onValidate.emit(validation);              \r\n\t\t\t\tif(validation && validation.length){\r\n\t\t\t\t\tfail(validation);\r\n\t\t\t\t}else{                    \r\n\t\t\t\t\tsucess(errors.filter(error => error.errors.length = 0));\r\n\t\t\t\t}\r\n\t\t\t});                        \r\n\t\t});         \r\n\t}\r\n\r\n\t/**\r\n\t * Associa os valores das propriedades de um objeto literal javascript aos campos do formulário.\r\n\t * A premissa é que as propriedades devem combinar os valores atribuidos à propriedade {@link IInput.getName}\r\n\t * de cada um dos campos adicionados ao formulário.\r\n\t * @example\r\n\t * //esse código vai atribuir o valor da propriedade `nome` do objeto `usr` \r\n\t * //ao campo do formulário cuja a propriedade setName tenha o valor `nome`\r\n\t * \r\n\t * interface Usuario {nome: string};\r\n\t * let usr:Usuario = {nome: \"Bart\"};\r\n\t * form.setData(usr);\r\n\t * @return {Form}\r\n\t */\r\n\tpublic setData(data: T): Form<T> {\r\n\t\tthis.data = <T>jquery.extend(true,{},data);\r\n\t\tif (data) {\r\n\t\t\tthis._inputs.forEach(({input, name}) => {\r\n\t\t\t\tlet value: any = null;\r\n\t\t\t\t\r\n\t\t\t\tif(input instanceof Select === true && input.getAssignedProperty && input.getAssignedProperty()){\r\n\t\t\t\t\tlet nameItem:string = input.getAssignedProperty();\r\n\t\t\t\t\tlet valueItem:any;\r\n\t\t\t\t\tvalueItem = this.getValueByPath(data,name);\t\t\t\t\t\r\n\t\t\t\t\tlet datas:any[] = input.getData();\t\t\t\t\t\r\n\t\t\t\t\tlet valueResult:any[] = datas?datas.filter(item=>{\r\n\t\t\t\t\t\t\tlet valueByArrayItem:any = this.getValueByPath(item,nameItem);\r\n\t\t\t\t\t\t\treturn valueByArrayItem === valueItem;\r\n\t\t\t\t\t\t}):null;\r\n\t\t\t\t\t\r\n\t\t\t\t\tvalue = valueResult && valueResult.length > 0?valueResult[0]:null;\r\n\t\t\t\t\tinput.setValue(value);\r\n\t\t\t\t}else if(input instanceof Chooser === true && input.getAssignedProperty && input.getAssignedProperty()){\r\n\t\t\t\t\t// @TODO verificar ação\r\n\t\t\t\t}else{\r\n\t\t\t\t\tvalue = this.getValueByPath(data,name);\r\n\t\t\t\t\tif(!value && (<any>input).labelAll){\r\n\t\t\t\t\t\tvalue = (<any>input).labelAll;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tinput.setValue(value);\r\n\t\t\t\t\tinput.validate();\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t});\r\n\t\t\t\r\n\t\t}\r\n\t\treturn this;\r\n\t}\r\n\r\n\tprivate getValueByPath(item:any,path:string){\r\n\t\tlet valueGroup = item;\r\n\t\tif(path.indexOf(\".\") > -1){\r\n\t\t\tvalueGroup = path.split(\".\").reduce( function ( prev, curr ) {\r\n\t\t\t\t\t\t\t\treturn prev?prev[curr]:null;\r\n\t\t\t\t\t\t\t}, item || this );\r\n\t\t}else{\r\n\t\t\tvalueGroup = item?item[path]:null;\r\n\t\t}\r\n\t\treturn valueGroup;\r\n\t}\r\n\r\n\t/**\r\n\t * Retorna um objeto T contendo nas propriedades os valores encontrados nos campos do formulário cujas\r\n\t * propriedades {@link IInput.getName} combinam com as propriedades de T.\r\n\t * @return {T}\r\n\t */\r\n\tpublic getData(): T {\r\n\t\tlet data: T = <T>{};\r\n\t\tthis._inputs.forEach(({input, name}) => {\r\n\t\t\tthis.setValueData(input,name,data);\r\n\t\t});\r\n\t\t//return Object.assign(this.data,data);\r\n\t\treturn <T>jquery.extend(true,{},this.data,data);        \r\n\t}\r\n\r\n\tprivate setValueData(input:ISelectInput, name:string,data:T):any {\r\n\t\tif(input.getAssignedProperty && input.getAssignedProperty()){\r\n\t\t\tlet nameAssigned = input.getAssignedProperty(); \r\n\t\t\tthis.updateValueByPath(this.getValueByPath(input.getValue(),nameAssigned),name,data);\r\n\t\t}else{\r\n\t\t\tthis.updateValueByPath(input.getValue(),name,data);\r\n\t\t}\r\n\t}\r\n\t// Setar os atributos de objetos complexos\r\n\tprivate updateValueByPath(value:any, pathObj:string, tree:any, branch = tree):any {\r\n\t\tlet path = pathObj.split(\".\");\r\n\t\tlet last = path.length === 1;\r\n\t\tbranch[path[0]] = last ? value : branch[path[0]]?branch[path[0]]:{};\r\n\t\treturn last ? tree : this.updateValueByPath(value, path.slice(1).join(\".\"), tree, branch[path[0]]);\r\n\t}\r\n\r\n\t/**\r\n\t * Reseta os campos para os seus valores padrão.\r\n\t * @see {@link IInput.reset}\r\n\t * @returns {this}\r\n\t */\r\n\tpublic reset(): this {\r\n\t\tthis._inputs.forEach(field => field.input.reset());\r\n\t\treturn this;\r\n\t}\r\n\tpublic rendered(): void {\r\n\t\tthis.onAttached.emit(null);\r\n\t}\r\n}\r\n"]}