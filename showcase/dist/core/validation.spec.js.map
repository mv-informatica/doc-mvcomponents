{"version":3,"sources":["../src/core/validation.spec.ts"],"names":[],"mappings":";;IAEA,QAAQ,CAAC,YAAY,EAAE;QACnB,QAAQ,CAAC,KAAK,EAAE;YACZ,EAAE,CAAC,qEAAqE,EAAE;gBACtE,IAAI,KAAK,GAAG,CAAC,CAAC;gBACd,IAAI,uBAAU,EAAE;qBACX,SAAS,CAAC,UAAA,CAAC,IAAI,OAAA,MAAM,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,EAAxB,CAAwB,CAAC;qBACxC,QAAQ,CAAC,KAAK,CAAC,CAAC;YACzB,CAAC,CAAC,CAAC;YACH,EAAE,CAAC,uEAAuE,EAAE;gBACxE,IAAI,KAAK,GAAG,GAAG,CAAC;gBAChB,MAAM,CAAC,IAAI,uBAAU,EAAE;qBAClB,UAAU,CAAC,UAAU,CAAC;qBACtB,UAAU,CAAC,KAAK,CAAC,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;YAC3C,CAAC,CAAC,CAAC;QACP,CAAC,CAAC,CAAA;QACF,QAAQ,CAAC,MAAM,EAAE;YACb,EAAE,CAAC,yDAAyD,EAAE;gBAC1D,IAAI,GAAG,GAAG,OAAO,CAAC;gBAClB,IAAI,UAAU,GAAG,IAAI,uBAAU,EAAE;qBAC5B,SAAS,CAAC,UAAA,CAAC,IAAI,OAAA,KAAK,EAAL,CAAK,CAAC;qBACrB,UAAU,CAAC,GAAG,CAAC,CAAC;gBACrB,UAAU;qBACL,UAAU,CAAC,UAAC,KAAK,EAAE,IAAI;oBACpB,MAAM,CAAC,KAAK,CAAC,CAAC,OAAO,CAAC,GAAG,CAAC,CAAA;oBAC1B,MAAM,CAAC,UAAU,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;gBACrC,CAAC,CAAC;qBACD,QAAQ,CAAC,IAAI,CAAC,CAAC;YACxB,CAAC,CAAC,CAAC;YACH,EAAE,CAAC,kFAAkF,EAAE;gBACnF,IAAI,GAAG,GAAG,OAAO,CAAC;gBAClB,IAAI,UAAU,GAAG,IAAI,uBAAU,EAAE;qBAC5B,SAAS,CAAC,UAAA,CAAC,IAAI,OAAA,IAAI,EAAJ,CAAI,CAAC;qBACpB,UAAU,CAAC,GAAG,CAAC,CAAC;gBACrB,UAAU;qBACL,UAAU,CAAC,UAAC,KAAK,EAAE,IAAI;oBACpB,MAAM,CAAC,KAAK,CAAC,CAAC,QAAQ,EAAE,CAAC;oBACzB,MAAM,CAAC,UAAU,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;gBACrC,CAAC,CAAC;qBACD,QAAQ,CAAC,IAAI,CAAC,CAAC;YACxB,CAAC,CAAC,CAAC;QACP,CAAC,CAAC,CAAC;QACH,QAAQ,CAAC,OAAO,EAAE;YACd,EAAE,CAAC,0DAA0D,EAAE;gBAC3D,IAAI,GAAG,GAAG,OAAO,CAAC;gBAClB,IAAI,UAAU,GAAG,IAAI,4BAAe,EAAE;qBACjC,SAAS,CAAC,UAAA,CAAC,IAAI,OAAA,OAAO,CAAC,OAAO,CAAC,KAAK,CAAC,EAAtB,CAAsB,CAAC;qBACtC,UAAU,CAAC,GAAG,CAAC,CAAC;gBACrB,UAAU;qBACL,UAAU,CAAC,UAAC,KAAK,EAAE,IAAI;oBACpB,MAAM,CAAC,KAAK,CAAC,CAAC,OAAO,CAAC,GAAG,CAAC,CAAA;oBAC1B,MAAM,CAAC,UAAU,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;gBACrC,CAAC,CAAC;qBACD,QAAQ,CAAC,IAAI,CAAC,CAAC;YACxB,CAAC,CAAC,CAAC;QACP,CAAC,CAAC,CAAC;IACP,CAAC,CAAC,CAAC","file":"validation.spec.js","sourcesContent":["import {Validation, AsyncValidation} from './validation';\n\ndescribe('Validation', () => {\n    describe('all', () => {\n        it('espera-se que o valor seja passado corretamente ao `sync:setMethod`', () => {\n            let value = 1;\n            new Validation()\n                .setMethod(v => expect(v).toEqual(value))\n                .validate(value);\n        });\n        it('espera-se que o método `sync:getMessage` faça o replace correatemente', () => {\n            let value = '1';\n            expect(new Validation()\n                .setMessage('{$value}')\n                .getMessage(value)).toEqual(value);\n        });\n    })\n    describe('sync', () => {\n        it('espera-se que o método `sync:onValidate` seja executado', () => {\n            let err = 'Error';\n            let validation = new Validation()\n                .setMethod(v => false)\n                .setMessage(err);\n            validation\n                .onValidate((error, that) => {\n                    expect(error).toEqual(err)\n                    expect(validation).toEqual(that);\n                })\n                .validate(null);\n        });\n        it('espera-se que o método `sync:onValidate` não informe a mensagem case seja valido', () => {\n            let err = 'Error';\n            let validation = new Validation()\n                .setMethod(v => true)\n                .setMessage(err);\n            validation\n                .onValidate((error, that) => {\n                    expect(error).toBeNull();\n                    expect(validation).toEqual(that);\n                })\n                .validate(null);\n        });\n    });\n    describe('async', () => {\n        it('espera-se que o método `async:onValidate` seja executado', () => {\n            let err = 'Error';\n            let validation = new AsyncValidation()\n                .setMethod(v => Promise.resolve(false))\n                .setMessage(err);\n            validation\n                .onValidate((error, that) => {\n                    expect(error).toEqual(err)\n                    expect(validation).toEqual(that);\n                })\n                .validate(null);\n        });\n    });\n});\n"]}