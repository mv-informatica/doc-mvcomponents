{"version":3,"sources":["../src/http/request.spec.ts"],"names":[],"mappings":"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","file":"request.spec.js","sourcesContent":["import jquery = require('jquery');\nimport {$http} from './http'\n\ndescribe('Request', () => {\n    it('espera-se que a requisição ajax seja executada', (done:any) => {\n        jquery.ajax('any').then(() => done(), () => done());\n    });\n\n    it('espera-se que os dados obtidos pelo get estejam corretos', (done:any) => {\n        $http.get('base/test/mock/simple-data.json')\n            .then( data => {\n                expect(data).toEqual(jasmine.objectContaining({a: 1, b: 2}));\n                done();\n            });\n    });\n\n    it('espera-se que uma respsota seja tratada como accept', (done:any) => {\n        $http.get('/base/test/mock/empty')\n            .then( data => data )\n            .catch( err => Promise.reject(err) )\n            .then( data => {\n                expect(data).toBe('');\n                done();\n            });\n    });\n\n    it('espera-se que os dados enviados pelo params estejam corretos', (done:any) => {\n        $http\n            .get('any')\n            .params({ a: 1, b: 2 })\n            .then(() => null, (err, request) => {\n                expect(request.url).toBe('any?a=1&b=2');\n                done();\n            });\n    });\n\n    it('espera-se que os dados enviados pelo params, de forma tradicional, estejam corretos', (done:any) => {\n        $http\n            .get('any')\n            .params({ a: [1,  2] }, true)\n            .then(() => null, (err, request) => {\n                expect(request.url).toBe('any?a=1&a=2');\n                done();\n            });\n    });\n\n    it('espera-se que os headers sejam enviados', (done:any) => {\n        $http\n            .get('any')\n            .header({'Authentication':'Basic 1234'})\n            .then(() => null, (err, request) => {\n                expect(request.headers).toEqual(jasmine.objectContaining({\n                    'Authentication': 'Basic 1234'\n                }));\n                done();\n            });\n    });\n\n    it('espera-se que os dados enviados body estejam corretos', (done:any) => {\n        let data = { a: 2, b: 2 };\n\n        $http\n            .post('any')\n            .body(data)\n            .then(() => null, (err, request) => {\n                expect(request.data).toBe(JSON.stringify(data));\n                done();\n            });\n    });\n});\n"]}