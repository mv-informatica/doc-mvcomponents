{"version":3,"sources":["../src/core/validations.ts"],"names":[],"mappings":";;;IAEA,IAAM,MAAM,GAAG,UAAC,KAAU;QACzB,MAAM,CAAC,CAAC,KAAK,IAAI,KAAK,KAAK,CAAC,CAAC;IAC9B,CAAC,CAAC;IAMF;QAAA;QA6FA,CAAC;QA5Fc,oBAAQ,GAAtB;YACC,MAAM,CAAC,IAAI,uBAAU,EAAO;iBAC1B,SAAS,CAAC,UAAA,KAAK,IAAI,OAAA,CAAC,MAAM,CAAC,KAAK,CAAC,EAAd,CAAc,CAAC;iBAClC,UAAU,CAAC,uBAAuB,CAAC,CAAC;QACvC,CAAC;QASa,oBAAQ,GAAtB,UAAuB,CAAS;YAC/B,MAAM,CAAC,IAAI,uBAAU,EAAU;iBAC7B,SAAS,CAAC,UAAA,KAAK,IAAI,OAAA,MAAM,CAAC,KAAK,CAAC,IAAI,KAAK,GAAG,CAAC,EAA1B,CAA0B,CAAC;iBAC9C,UAAU,CAAC,gCAA8B,CAAG,CAAC,CAAC;QACjD,CAAC;QASa,uBAAW,GAAzB,UAA0B,CAAS;YAClC,MAAM,CAAC,IAAI,uBAAU,EAAU;iBAC7B,SAAS,CAAC,UAAA,KAAK,IAAI,OAAA,MAAM,CAAC,KAAK,CAAC,IAAI,KAAK,GAAG,CAAC,EAA1B,CAA0B,CAAC;iBAC9C,UAAU,CAAC,gCAA8B,CAAG,CAAC,CAAC;QACjD,CAAC;QASa,kBAAM,GAApB,UAAqB,MAAc;YAClC,MAAM,CAAC,IAAI,uBAAU,EAAU;iBAC7B,SAAS,CAAC,UAAA,KAAK,IAAI,OAAA,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,EAArC,CAAqC,CAAC;iBACzD,UAAU,CAAC,0BAA0B,CAAC,CAAC;QAC1C,CAAC;QASa,qBAAS,GAAvB,UAAwB,CAAS;YAChC,MAAM,CAAC,IAAI,uBAAU,EAAU;iBAC7B,SAAS,CAAC,UAAA,KAAK,IAAI,OAAA,MAAM,CAAC,KAAK,CAAC,IAAI,CAAA,KAAG,KAAO,CAAA,CAAC,MAAM,IAAI,CAAC,EAAvC,CAAuC,CAAC;iBAC3D,UAAU,CAAC,mEAAuD,CAAG,CAAC,CAAC;QAC1E,CAAC;QAUa,qBAAS,GAAvB,UAAwB,CAAS;YAChC,MAAM,CAAC,IAAI,uBAAU,EAAU;iBAC7B,SAAS,CAAC,UAAA,KAAK,IAAI,OAAA,MAAM,CAAC,KAAK,CAAC,IAAI,CAAA,KAAG,KAAO,CAAA,CAAC,MAAM,IAAI,CAAC,EAAvC,CAAuC,CAAC;iBAC3D,UAAU,CAAC,mEAAuD,CAAG,CAAC,CAAC;QAC1E,CAAC;QASa,iBAAK,GAAnB;YACC,IAAM,YAAY,GAAG,wCAAwC,CAAC;YAC9D,MAAM,CAAC,WAAW;iBAChB,MAAM,CAAC,YAAY,CAAC;iBACpB,UAAU,CAAC,gBAAgB,CAAC,CAAC;QAChC,CAAC;QAEa,iBAAK,GAAnB;YACC,IAAM,YAAY,GAAG,mBAAmB,CAAC;YACzC,MAAM,CAAC,WAAW;iBAChB,MAAM,CAAC,YAAY,CAAC;iBACpB,UAAU,CAAC,cAAc,CAAC,CAAC;QAC9B,CAAC;QACF,kBAAC;IAAD,CA7FA,AA6FC,IAAA;IA7FY,kCAAW","file":"validations.js","sourcesContent":["import {Validation} from \"./validation\";\r\n\r\nconst isNull = (value: any) => {\r\n\treturn !value && value !== 0;\r\n};\r\n\r\n/** \r\n * classe auxiliar para validacao de campos\r\n * @memberof module:mvcomponents/core\r\n */\r\nexport class Validations {\r\n\tpublic static notEmpty(): Validation<any> {\r\n\t\treturn new Validation<any>()\r\n\t\t\t.setMethod(value => !isNull(value))\r\n\t\t\t.setMessage(\"O campo é obrigatório\");\r\n\t}\r\n\t/**\r\n\t * Menor que\r\n\t * @param v {number}\r\n\t * @example\r\n\t * myInput.validator.add(Validations.lessThan(5));\r\n\t * myInput.setValue(10);\r\n\t * myInput.validate().then(()=>console.log('ok'));\r\n\t */\r\n\tpublic static lessThan(v: number): Validation<number> {\r\n\t\treturn new Validation<number>()\r\n\t\t\t.setMethod(value => isNull(value) || value < v)\r\n\t\t\t.setMessage(`O valor deve ser menor que ${v}`);\r\n\t}\r\n\t/**\r\n\t * Maior que\r\n\t * @param v {number}\r\n\t * @example\r\n\t * myInput.validator.add(Validations.greaterThan(5));\r\n\t * myInput.setValue(10);\r\n\t * myInput.validate().then(()=>console.log('ok'));\r\n\t */\r\n\tpublic static greaterThan(v: number): Validation<number> {\r\n\t\treturn new Validation<number>() \r\n\t\t\t.setMethod(value => isNull(value) || value > v)\r\n\t\t\t.setMessage(`O valor deve ser maior que ${v}`);\r\n\t}\r\n\t/**\r\n\t * Expressao regular\r\n\t * @param regexp {RegExp}\r\n\t * @example\r\n\t * myInput.validator.add(Validations.regexp(/teste/g));\r\n\t * myInput.setValue('teste');\r\n\t * myInput.validate().then(()=>console.log('ok'));\r\n\t */\r\n\tpublic static regexp(regexp: RegExp): Validation<string> {\r\n\t\treturn new Validation<string>()\r\n\t\t\t.setMethod(value => isNull(value) || !!regexp.exec(value))\r\n\t\t\t.setMessage(\"O campo não está correto\");\r\n\t}\r\n\t/**\r\n\t * Tamanho maximo\r\n\t * @param v {number}\r\n\t * @example\r\n\t * myInput.validator.add(Validations.maxLength(2));\r\n\t * myInput.setValue('aa');\r\n\t * myInput.validate().then(()=>console.log('ok'));\r\n\t */\r\n\tpublic static maxLength(v: number): Validation<string> {\r\n\t\treturn new Validation<string>()\r\n\t\t\t.setMethod(value => isNull(value) || `${value}`.length <= v)\r\n\t\t\t.setMessage(`A quantidade máxima de caracteres para este campo é ${v}`);\r\n\t}\r\n\r\n\t/**\r\n\t * Tamanho minino\r\n\t * @param v {number}\r\n\t * @example\r\n\t * myInput.validator.add(Validations.minLength(2));\r\n\t * myInput.setValue('aa');\r\n\t * myInput.validate().then(()=>console.log('ok'));\r\n\t */\r\n\tpublic static minLength(v: number): Validation<string> {\r\n\t\treturn new Validation<string>()\r\n\t\t\t.setMethod(value => isNull(value) || `${value}`.length >= v)\r\n\t\t\t.setMessage(`A quantidade mínima de caracteres para este campo é ${v}`);\r\n\t}\r\n\r\n\t/**\r\n\t * Valida um email\r\n\t * \r\n\t * @static\r\n\t * @param {string} v\r\n\t * @returns {Validation<string>}\r\n\t */\r\n\tpublic static email(): Validation<string> {\r\n\t\tconst EMAIL_REGEXP = /^([\\w\\.\\-_]+)?\\w+@[\\w-_]+(\\.\\w+){1,}$/i;\r\n\t\treturn Validations\r\n\t\t\t.regexp(EMAIL_REGEXP)\r\n\t\t\t.setMessage(\"Email inválido\");\r\n\t}\r\n\r\n\tpublic static color(): Validation<string> {\r\n\t\tconst COLOR_REGEXP = /^#[0-9a-fA-F]{6}$/;\r\n\t\treturn Validations\r\n\t\t\t.regexp(COLOR_REGEXP)\r\n\t\t\t.setMessage(\"Cor inválida\");\r\n\t}\r\n}\r\n"]}