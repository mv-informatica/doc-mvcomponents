{"version":3,"sources":["../src/core/validator.spec.ts"],"names":[],"mappings":"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","file":"validator.spec.js","sourcesContent":["import {Validator} from './validator';\nimport {Validation, AsyncValidation} from './validation';\n\ndescribe('Validator', () => {\n    it('espera-se que o `onValidate` seja executado', () => {\n        let i = 0;\n        \n        new Validator<number>()\n            .configure(validator => i++ && validator.onValidate.once(errors => expect(errors.length).toEqual(0)))\n            .validate(null)\n            .then(errors => expect(errors.length).toEqual(0));\n\n        expect(i).toEqual(1);\n    });\n\n    it('espera-se que o validator sem validação não contenha erros', () => {\n        new Validator<number>()\n            .configure(validator => validator.onValidate.once(errors => expect(errors.length).toEqual(0)))\n            .validate(null)\n            .then(errors => expect(errors.length).toEqual(0));\n    });\n\n    it('espera-se que sucesso não sejam inseridas as listas de erros', () => {\n        let err = 'Error';\n        new Validator<number>()\n            .configure(validator => validator.onValidate.once(errors => expect(errors.length).toEqual(0)))\n            .add(new Validation<number>()\n                .setMethod(value => true)\n                .setMessage(err))\n            .validate(null)\n            .then(errors => expect(errors.length).toEqual(0));\n    });\n\n    it('espera-se que falhas sejam inseridas na lista de erros', () => {\n        let err = 'Error';\n        new Validator<number>()\n            .configure(validator => validator.onValidate.once(([error]) => expect(error).toEqual(err)))\n            .add(new Validation<number>()\n                .setMethod(value => false)\n                .setMessage(err))\n            .validate(null)\n            .then(([error]) => expect(error).toEqual(err));\n    });\n\n    it('espera-se que funcione corretamente em validacoes sync', () => {\n        let err = 'Error'\n        let ok = 'Success';\n        new Validator<number>()\n            .add(new Validation<number>()\n                .setMethod(value => false)\n                .setMessage(err))\n            .add(new Validation<number>()\n                .setMethod(value => true)\n                .setMessage(ok))\n            .add(new Validation<number>()\n                .setMethod(value => false)\n                .setMessage(err))\n            .validate(null)\n            .then(erros => {\n                expect(erros.length).toEqual(2);\n                erros.forEach(error => expect(error).toEqual(err));\n            });\n    });\n\n    it('espera-se que funcione corretamente em validacoes async', () => {\n        let err = 'Error'\n        let ok = 'Success';\n        new Validator<number>()\n            .addAsync(new AsyncValidation<number>()\n                .setMethod(value => Promise.resolve(false))\n                .setMessage(err))\n            .addAsync(new AsyncValidation<number>()\n                .setMethod(value => Promise.resolve(true))\n                .setMessage(ok))\n            .addAsync(new AsyncValidation<number>()\n                .setMethod(value => Promise.resolve(false))\n                .setMessage(err))\n            .validate(null)\n            .then(erros => {\n                expect(erros.length).toEqual(2);\n                erros.forEach(error => expect(error).toEqual(err));\n            });\n    });\n\n    it('espera-se que funcione corretamente com ambas as validações', () => {\n        let err = 'Error'\n        let ok = 'Success';\n        new Validator<number>()\n            .addAsync(new AsyncValidation<number>()\n                .setMethod(value => Promise.resolve(false))\n                .setMessage(err))\n            .addAsync(new AsyncValidation<number>()\n                .setMethod(value => Promise.resolve(true))\n                .setMessage(ok))\n            .add(new Validation<number>()\n                .setMethod(value => false)\n                .setMessage(err))\n            .add(new Validation<number>()\n                .setMethod(value => true)\n                .setMessage(ok))\n            .validate(null)\n            .then(erros => {\n                expect(erros.length).toEqual(2);\n                erros.forEach(error => expect(error).toEqual(err));\n            });\n    });\n});\n"]}