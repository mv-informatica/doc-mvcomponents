{"version":3,"sources":["../src/core/event-emitter.ts"],"names":[],"mappings":"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","file":"event-emitter.js","sourcesContent":["import {EEventEmitterStatus} from \"./enum/e-event-emitter-status\";\r\n\r\nexport interface IEventSubscribe{\r\n\tref:string;\r\n\tcancel?:Function;\r\n}\r\n\r\nexport interface IEventEmitterError{\r\n\terror:string;\r\n\tstatus:EEventEmitterStatus;    \r\n}\r\ninterface IEventSubscribeExtended extends IEventSubscribe{\r\n\thandler:Function;\r\n\tonce?: boolean;\r\n}\r\n/**\r\n * @interface IEventEmitter\r\n * @memberof module:mvcomponents/core\r\n */\r\nexport interface IEventEmitter{\r\n\tdone(p_onSuccess: Function,p_onError?:(err:IEventEmitterError)=>any):void;\r\n}\r\n\r\nexport class EventInsc implements IEventSubscribe{\r\n\tpublic ref:string;\r\n\tprivate eventInst:EventEmitter<any>;\r\n\tconstructor(refid:string,peventEmitter:EventEmitter<any>){\r\n\t\tthis.ref = refid;\r\n\t\tthis.eventInst = peventEmitter;\r\n\t}\r\n\tpublic cancel():void{\r\n\t\tthis.eventInst.unsubscribe(this);\r\n\t\tdelete this.eventInst;\r\n\t}\r\n}\r\n\r\nexport interface IConfigEmitter{\r\n\r\n}\r\n\r\n/**\r\n * @memberof module:mvcomponents/core\r\n */\r\nexport class EventEmitter<T>{\r\n\tprivate _events:IEventSubscribeExtended[];\r\n\tprivate _next_iterator:number;\r\n\tprivate _cancel_next:boolean;\r\n\tprivate _lastvalue:T;\r\n\tprivate config:IConfigEmitter; \r\n\tconstructor(config:IConfigEmitter={}){\r\n\t\tthis.config = config;\r\n\t\tthis._next_iterator=0;\r\n\t\tthis._cancel_next = false;\r\n\t}\r\n\t/**\r\n\t * Emite o evento para todos os ouvintes inscritos\r\n\t * @example\r\n\t * let onTeste = new EventEmitter<string>();\r\n\t * onTeste.emit(\"teste!\");\r\n\t * @returns {IEventEmitter}\r\n\t */\r\n\tpublic emit(value: T):IEventEmitter{\r\n\t\tlet hasCancel:boolean = this._cancel_next;\r\n\t\tif (hasCancel) {\r\n\t\t\tthis._cancel_next = false;            \r\n\t\t}else if(this.hasSubscribers()){\r\n\t\t\tlet _toremove:IEventSubscribe[] = [];\r\n\t\t\thasCancel = !this._events.every( _sub => {                \r\n\t\t\t\t_sub.handler(value);\r\n\t\t\t\tif(_sub.once){                    \r\n\t\t\t\t\t_toremove.push({ref:_sub.ref});\r\n\t\t\t\t}\r\n\t\t\t\tif(this._cancel_next){\r\n\t\t\t\t\tthis._cancel_next = false;\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}                \r\n\t\t\t\treturn true;\r\n\t\t\t});           \r\n\t\t\t_toremove.forEach(_subref => this.unsubscribe(_subref));\r\n\t\t}\r\n\t\tthis._lastvalue = value;     \r\n\t\treturn {\r\n\t\t\tdone:(p_onSuccess:()=>void,p_onError?:(err:IEventEmitterError)=>any)=>{\r\n\t\t\t\tif(!hasCancel){\r\n\t\t\t\t\tp_onSuccess();\r\n\t\t\t\t}else if(p_onError){\r\n\t\t\t\t\tp_onError({\r\n\t\t\t\t\t\terror:\"error: there is a cancel solicitation\"\r\n\t\t\t\t\t\t,status:EEventEmitterStatus.CANCELED\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\t}   \r\n\tprivate next(value:T):void{\r\n\t\tif(this.hasSubscribers()){\r\n\t\t\tthis._events[this._next_iterator].handler(value);\r\n\t\t\tthis._next_iterator++;  \r\n\t\t}\r\n\t}\r\n\tprivate getRefId():string{\r\n\t\treturn `${new Date().getTime()}#${this._events.length}`;\r\n\t}\r\n\t/**\r\n\t * Metodo para inscricao de ouvinte no Emissor de Eventos\r\n\t * @example\r\n\t * let onTeste = new EventEmitter<string>();\r\n\t * onTeste.subscribe((msg)=>console.log(msg));\r\n\t * @returns {IEventSubscribe}\r\n\t */     \r\n\tpublic subscribe(p_callback:(value:T)=>any): IEventSubscribe {\r\n\t\tif(!this._events){\r\n\t\t\tthis._events = [];\r\n\t\t}\r\n\t\tlet ref:string = this.getRefId();\r\n\t\tthis._events.push({ref:ref,handler:p_callback});\r\n\t\treturn new EventInsc(ref,this);\r\n\t}\r\n\t/**\r\n\t * A inscricao é avisada somente uma vez com esse metodo\r\n\t * @example\r\n\t * let onTeste = new EventEmitter<string>();\r\n\t * onTeste.once((msg)=>console.log(msg));\r\n\t * @returns {IEventSubscribe}\r\n\t */     \r\n\tpublic once(p_callback: (value: T) => any): IEventSubscribe {\r\n\t\tif (!this._events) {\r\n\t\t\tthis._events = [];\r\n\t\t}\r\n\t\tlet ref: string = this.getRefId();\r\n\t\tthis._events.push({ ref: ref, handler: p_callback,once:true });\r\n\t\treturn new EventInsc(ref,this);\r\n\t}\r\n\t/**\r\n\t* Verifica se existe inscritos \r\n\t* @example\r\n\t* let onTeste = new EventEmitter<string>();\r\n\t* onTeste.hasSubscribers();\r\n\t* @returns {boolean}\r\n\t*/ \r\n\tpublic hasSubscribers():boolean{\r\n\t\tif(this._events){\r\n\t\t\treturn this._events.length > 0;\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\t/**\r\n\t * Remove todos inscritos \r\n\t * @example\r\n\t * let onTeste = new EventEmitter<string>();\r\n\t * onTeste.unsubscribeAll();\r\n\t */\r\n\tpublic unsubscribeAll(): void {\r\n\t\tthis._events=[];\r\n\t}\r\n\t/**\r\n\t * Cancela a proxima chamada do EventEmitter \r\n\t * @example\r\n\t * let onTeste = new EventEmitter<string>();\r\n\t * onTeste.cancel();\r\n\t */\r\n\tpublic cancel():void{\r\n\t\tthis._cancel_next = true;\r\n\t}\r\n\t/**\r\n\t * Remove um inscrito \r\n\t * @example\r\n\t * let onTeste = new EventEmitter<string>();\r\n\t * let inscrito = onTeste.subscribe((msg)=>console.log(msg));\r\n\t * onTeste.unsubscribe(inscrito);\r\n\t */\r\n\tpublic unsubscribe(subscribe:IEventSubscribe):void{\r\n\t\tif(this.hasSubscribers()){\r\n\t\t\tlet indx:number = -1; \r\n\t\t\tthis._events.every((p_sub:IEventSubscribeExtended,p_indx:number)=>{\r\n\t\t\t\tif(p_sub.ref === subscribe.ref){\r\n\t\t\t\t\tindx = p_indx;\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t\treturn true;\r\n\t\t\t});        \r\n\t\t\tif(indx >- 1){\r\n\t\t\t\tthis._events.splice(indx,1);\r\n\t\t\t}\r\n\t\t}   \r\n\r\n\t}\r\n\t/**\r\n\t * Retorna último valor emitido \r\n\t * @example\r\n\t * let onTeste = new EventEmitter<string>();\r\n\t * onTeste.emit('teste');\r\n\t * console.log(onTeste.emittedValue);\r\n\t * @returns {T}\r\n\t */\r\n\tpublic get emittedValue():T{\r\n\t\treturn this._lastvalue;\r\n\t}\r\n}\r\n"]}