{"version":3,"sources":["../src/container/form-box.ts"],"names":[],"mappings":";;;IAiDA;QAA6B,mCAAwB;QAGpD;YAAA,YACC,kBAAM,KAAK,EAAE,EAAE,CAAC,SAIhB;YAHA,KAAI,CAAC,YAAY,CAAC,SAAS,CAAC,CAAC;YAC7B,KAAI,CAAC,MAAM,GAAG,EAAE,CAAC;YACjB,KAAI,CAAC,UAAU,GAAG,IAAI,CAAC;;QACxB,CAAC;QACS,4BAAU,GAApB,UAAqB,OAAqB,EAAE,MAAc;YACzD,IAAI,KAAK,GAAgB,OAAO,CAAC;YACjC,IAAI,IAAI,GAAU,KAAK,CAAC,OAAO,IAAI,KAAK,CAAC,OAAO,EAAE,CAAC;YACnD,EAAE,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;gBACV,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,EAAC,IAAI,EAAC,IAAI,EAAC,KAAK,EAAC,KAAK,EAAC,CAAC,CAAC;YAC3C,CAAC;YAAA,IAAI,CAAC,EAAE,CAAA,CAAO,OAAQ,CAAC,UAAU,CAAC,CAAA,CAAC;gBACnC,CAAA,KAAA,IAAI,CAAC,MAAM,CAAA,CAAC,IAAI,WAAU,OAAQ,CAAC,MAAM,EAAE;YAC5C,CAAC;YACD,iBAAM,UAAU,YAAC,OAAO,EAAE,MAAM,CAAC,CAAC;;QACnC,CAAC;QACO,0BAAQ,GAAhB;YACC,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAC5B,CAAC;QAMM,2BAAS,GAAhB,UAAiB,EAAW;YAC3B,IAAI,CAAC,iBAAiB,EAAE,CAAC;YACzB,iBAAM,SAAS,YAAC,EAAE,CAAC,CAAC;YACpB,MAAM,CAAC,IAAI,CAAC;QACb,CAAC;QACF,cAAC;IAAD,CAhCA,AAgCC,CAhC4B,wBAAU,GAgCtC;IAhCY,0BAAO","file":"form-box.js","sourcesContent":["import {AContainer} from \"./abstract/a-container\";\r\nimport {IInput} from \"../input/interface/i-input\";\r\nimport {IWidget} from \"../widget/interface/i-widget\";\r\nimport {IButton} from \"../button/interface/i-button\";\r\nimport {ToolBar} from \"./toolbar\";\r\nimport {ButtonGroup} from \"./button-group\";\r\nimport {ICustomComponent} from \"../core/interface/i-custom-component\";\r\nimport {IDataGrid} from \"../datagrid/interface/i-data-grid\";\r\nimport {TreeGrid} from \"../treegrid/tree-grid\";\r\nimport {TileList} from \"../widget/tile-list\";\r\n\r\n//export type IFormBoxItem =  IInput<any>|IWidget;\r\nexport type IFormBoxItem = IWidget | IButton | IInput<any> | ToolBar | ButtonGroup | ICustomComponent | IDataGrid<any> | TreeGrid<any>;\r\n/**\r\n * \r\n * A finalidade deste container é facilitar o trabalho com estruturas de formulários.\r\n * Possui métodos auxiliares que facilitam o gerenciamento dos componentes a ele adicionados, para isto\r\n * deve ser estendida pela classe final e cada campo que se deseje gerenciar deve ser uma propriedade da classe.\r\n * \r\n * @export\r\n * @memberof module:mvcomponents/container\r\n * \r\n * @example\r\n * import {FormBox,Form} from \"mvcomponents/container\";\r\n * import {TextInput, PassWordInput} from \"mvcomponents/input\";\r\n *\r\n * let formBox = new FormBox();\r\n * let formTest = new Form();\r\n * \r\n * let txtLogin = new TextInput(\"login\");\r\n * txtLogin.setLabel(\"Login\");\r\n * txtLogin.setName(\"login\");\r\n * txtLogin.setSize(12);\r\n * formBox.append(txtLogin);\r\n * txtSenha = new PassWordInput(\"senha\");\r\n * txtSenha.setLabel(\"Senha\");\r\n * txtSenha.setName(\"senha\");\r\n * txtSenha.setSize(12);\r\n * formBox.append(txtSenha);\r\n * btnOK = new Button(\"OK\");\r\n * btnOK.addEvent(EMouseEvent.CLICK, () => {\r\n *     console.log('logar');\r\n * });\r\n * btnOK.setSize(12);\r\n * \r\n * formTest.append(formBox);\r\n * formTest.append(btnOK);\r\n * \r\n*/\r\nexport class FormBox extends AContainer<IFormBoxItem> {\r\n\tprivate inputs:{name:string,input:IInput<any>}[];\r\n\tpublic isFieldset:boolean;\r\n\tconstructor() {\r\n\t\tsuper(\"div\", \"\");\r\n\t\tthis.addStyleName(\"FormBox\");\r\n\t\tthis.inputs = [];\r\n\t\tthis.isFieldset = true;\r\n\t}\r\n\tprotected insertItem(element: IFormBoxItem, method: string): void {\r\n\t\tlet input = <IInput<any>>element;\r\n\t\tlet name:string = input.getName && input.getName();\r\n\t\tif (name) {\r\n\t\t\tthis.inputs.push({name:name,input:input});\r\n\t\t}else if((<any>element).isFieldset){\r\n\t\t\tthis.inputs.push(...(<any>element).inputs);\r\n\t\t}\r\n\t\tsuper.insertItem(element, method);\r\n\t}\r\n\tprivate rendered(): void {\r\n\t\tthis.onAttached.emit(null);\r\n\t}\r\n\t/**\r\n\t* Habilita ou desabilita o container.\r\n\t* @param {boolean} on\r\n\t* @returns {FormBox}\r\n\t*/    \r\n\tpublic setEnable(on: boolean): this {\r\n\t\tthis.addBlockContainer();\r\n\t\tsuper.setEnable(on);\r\n\t\treturn this;\r\n\t}\r\n}\r\n"]}