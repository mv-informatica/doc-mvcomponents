{"version":3,"sources":["../src/pagination/pagination.ts"],"names":[],"mappings":"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","file":"pagination.js","sourcesContent":["import {ICustomComponent} from \"../core/interface/i-custom-component\";\r\nimport {Render} from \"../core/decorator/d-render\";\r\nimport {IStore} from \"../store/interface/i-store\";\r\nimport {IPagination, IPaginationResult, IPaginationRequest, IPaginationSorting} from \"./interface/i-pagination\";\r\nimport {$http} from \"../http/http\";\r\nimport jquery = require(\"jquery\");\r\n\r\nimport \"./assets/css/pagination.css!\";\r\n/**\r\n * \r\n * <img src=\"../../doc_assets/pagination_example.png\" title=\"Pagination Utilizada em um DataGrid\" alt=\"Pagination\">\r\n * \r\n * Este componente exibe links de paginação gerados automaticamente de acordo com a url informada no construtor.\r\n * Esta url deve retornar um json \r\n * de acordo com o retorno do repositório que \r\n * extenda a interface [PagingAndSortingRepository]{@link http://docs.spring.io/spring-data/commons/docs/current/api/org/springframework/data/repository/PagingAndSortingRepository.html} \r\n * do Spring Data. O retorno de cada requisição retornará um conjunto de dados que será adicionado a um {@link IStore<T>} que por sua vez pode ser \r\n * utilizada como fonte de dados de alguns componentes, como o {@link DataGrid} e o {@link TreeGrid}. A responsabilidade deste componente é \r\n * apenas controlar as requisições para obtenção dos dados e não a exibição dos mesmos.\r\n * \r\n * A cada resposta de requisição o componente atualizará os dados da store através do método {@link IStore#setData}.\r\n * \r\n * @memberof module:mvcomponents/pagination\r\n * \r\n * @see {@link PaginatedDataGrid}\r\n * @see {@link DataGrid}\r\n * @see {@link TreeGrid}\r\n * @example\r\n * \r\n * interface Pessoa {\r\n *     id: number;\r\n *     nome: string;\r\n *     sobrenome: string;\r\n *     idade: string;\r\n *     pais: string;\r\n * }\r\n * \r\n * let store = new PessoaStore();\r\n * \r\n * let grid:DataGrid<Pessoa> = new DataGrid<Pessoa>()\r\n *     .setColumns([\r\n *         {name: \"nome\", title: \"Nome\", sortable: true, width: 25},\r\n *         {name: \"sobrenome\", title: \"Sobrenome\", sortable: true, width: 25},\r\n *         {name: \"idade\", title: \"Idade\", sortable: true, width: 25},\r\n *         {name: \"pais\", title: \"País\", sortable: true, width: 25}\r\n *     ])\r\n *     .addTableStyle(EGridStyle.TABLE_HOVER, EGridStyle.TABLE_BORDERED, EGridStyle.TABLE_STRIPED);\r\n * \r\n * store.onChange.subscribe((pessoas: Pessoa[]) => {\r\n *      grid.setData(pessoas);\r\n * });\r\n * \r\n * let pagination: Pagination<Pessoa> = new Pagination<Pessoa>(\"/dist/mv-starter/pessoa/pagination\");\r\n * pagination\r\n *     .setStore(store)//o Pagination atribuirá dados à store a cada nova resposta de requisição\r\n *     .loadPage({page: 0, size: 3})\r\n * \r\n * //Exemplo de passagem de parâmetros para ordenação\r\n * grid.onSortingChange.subscribe((cols) => {\r\n *     let sort: any[] = [];\r\n *     cols.forEach((c: IDataGridColumn) => {\r\n *         let direction = (c.sortingDirection == EDataGridSortingDirection.ASCENDING) ? 'asc' : 'desc';\r\n *         sort.push({\"property\": c.name, \"direction\": direction});\r\n *     });    \r\n *     pagination.loadPage({\r\n *         page: pagination.getLastPaginationRequest().page,\r\n *         sort: sort\r\n *     });\r\n * })\r\n * \r\n *\r\n */\r\n@Render({\r\n\ttemplateUrl: \"mvcomponents/pagination/assets/html/pagination.template\"\r\n})\r\nexport class Pagination<T> implements IPagination<T>, ICustomComponent {\r\n\t/**\r\n\t * Guarda toda a resposta obtida ao se carregar uma nova página.\r\n\t */\r\n\tpublic paginationResult: IPaginationResult<T>;\r\n\t/**\r\n\t * Propriedade interna para fazer o controle dos números de páginas que serão exibidos.\r\n\t */\r\n\tprivate visiblePageNumbers: number[] = [];\r\n\t/**\r\n\t * Configura o total de links que serão exibidos na paginação.\r\n\t */\r\n\tprivate visiblePageNumbersTotal: number = 5;\r\n\t/**\r\n\t * Quantidade de itens que deverão ser exibidos por página.\r\n\t */\r\n\tprivate pageSize: number = 20;\r\n\t/**\r\n\t * Guarda os dados da última requisição realizada.\r\n\t */\r\n\tprivate lastPaginationRequest: IPaginationRequest;\r\n\t/**\r\n\t * URL base para as requisições.\r\n\t */\r\n\tprivate lastURL: string;\r\n\t/**\r\n\t * Store que terá seus dados alterados para os dados obtidos pela paginação.\r\n\t */\r\n\tprivate store: IStore<T>;\r\n\r\n\tprivate previousButtonDisabledClass: string = \"disabled\";\r\n\tprivate nextButonDisabledClass: string = \"disabled\";\r\n\t/**\r\n\t * Mensagem com informações sobre a paginação.\r\n\t */\r\n\tprivate paginationInfoTemplate: string;\r\n\r\n\tconstructor(baseURL: string) {\r\n\t\tthis.lastURL = baseURL;\r\n\t}\r\n\t/**\r\n\t * Carrega uma nova página de acordo com os parâmetros informados.\r\n\t * \r\n\t * @param {IPaginationRequest} params - Caso a propriedade {@link IPaginationRequest#size} do parâmetro `params` não seja informada, o último valor\r\n\t * informado para esta propriedade será usado, caso não tenha sido informado ainda, o valor padrão \r\n\t * será utilizado ({@link Pagination.pageSize}).\r\n\t * @param {string} p_link - Caso o parâmetro `p_link` não seja informado, o valor da propriedade {@link Pagination#baseURL} será utilizado.\r\n\t * @returns {this}\r\n\t */\r\n\tpublic loadPage(params: IPaginationRequest, p_link?:string): this{\r\n\t\tp_link = (p_link) ? p_link : this.lastURL;\r\n\t\tif (params.size === undefined) {\r\n\t\t\tparams.size = this.pageSize;\r\n\t\t} else {\r\n\t\t\tthis.pageSize = params.size;\r\n\t\t}\r\n\t\tthis.lastPaginationRequest = <IPaginationRequest>jquery.extend({}, params);\r\n\t\tparams = this.prepareSortingParams(params);\r\n\t\t$http\r\n\t\t\t.get(p_link)\r\n\t\t\t.params(params, true)\r\n\t\t\t.then( (dta:IPaginationResult<T>) => this.onPaginationResultReceived(dta));\r\n\t\tthis.lastURL = p_link;\r\n\t\treturn this;\r\n\t}\r\n\t/**\r\n\t * @param {IStore<T>} store\r\n\t * @returns {this}\r\n\t */\r\n\tpublic setStore(store: IStore<T>): this {\r\n\t\tthis.store = store;\r\n\t\treturn this;\r\n\t}\r\n\t/**\r\n\t * Configura o total de links que devem ser exibidos na paginação (links com números das páginas)\r\n\t * @param {number} total\r\n\t * @returns {this}\r\n\t */\r\n\tpublic setTotalOfVisibleLinks(total: number): this{\r\n\t\tthis.visiblePageNumbersTotal = total;\r\n\t\treturn this;\r\n\t}\r\n\t/**\r\n\t * Retorna os dados da última requisição realizada.\r\n\t * @returns {IPaginationRequest}\r\n\t */\r\n\tpublic getLastPaginationRequest(): IPaginationRequest {\r\n\t\treturn this.lastPaginationRequest;\r\n\t}\r\n\t/**\r\n\t * Retorna o último resultao de paginação obtido do servidor\r\n\t * @returns {IPaginationResult<T>}\r\n\t */\r\n\tpublic getLastPaginationResult(): IPaginationResult<T> {\r\n\t\treturn this.paginationResult;\r\n\t}\r\n\tpublic getLastURL(): string {\r\n\t\treturn this.lastURL;\r\n\t}\r\n\tpublic getPaginationInfo(): string {        \r\n\t\tlet lastResult = this.getLastPaginationResult();\r\n\t\tif (lastResult === undefined || lastResult.number === undefined || this.paginationInfoTemplate === undefined) {\r\n\t\t\treturn \"\";\r\n\t\t}\r\n\t\tlet from = (lastResult.number * lastResult.size) + 1;\r\n\t\tlet to = (lastResult.number * lastResult.size) + lastResult.size;\r\n\t\tto = (to > lastResult.totalElements) ? lastResult.totalElements : to;\r\n\t\tlet info = this.paginationInfoTemplate\r\n\t\t\t.replace(\"{from}\", new String(from).toString())\r\n\t\t\t.replace(\"{to}\", new String(to).toString())\r\n\t\t\t.replace(\"{of}\", new String(lastResult.totalElements).toString());\r\n\t\treturn info;\r\n\t}\r\n\t/**\r\n\t * Adiciona o template que será utilizado para exibir informações sobre a paginação.\r\n\t * A string passada como template deverá ter o seguintes placeholders:\r\n\t * {from} - Exbirá o número do primeiro registro da página\r\n\t * {to} - Exibirá o número do último registro da página\r\n\t * {of} - Exibirá o total de elementos da paginação\r\n\t * @example\r\n\t * pagination.setPaginationInfoTemplate(\"Exibindo {from} - {to} de {of}\");\r\n\t */\r\n\tpublic setPaginationInfoTemplate(template: string): this {\r\n\t\tthis.paginationInfoTemplate = template;\r\n\t\treturn this;\r\n\t}\r\n\tpublic clear(): this {\r\n\t\tthis.lastPaginationRequest = undefined;\r\n\t\tthis.paginationResult = <any>{number:undefined};\r\n\t\tthis.store.set([]);\r\n\t\tthis.visiblePageNumbers = [];\r\n\t\tthis.refresh();\r\n\t\treturn this;\r\n\t}\r\n\tpublic attached() : void{\r\n\t\t\r\n\t}\r\n\t/**\r\n\t * Altera os parâmetros de ordenação da requisição para se adequarem aos esperados pelo Spring Data.\r\n\t * @param {IPaginationRequest} params\r\n\t * @returns {IPaginationRequest}\r\n\t */\r\n\tprivate prepareSortingParams(params: IPaginationRequest): IPaginationRequest {\r\n\t\tif (!params.sort) {\r\n\t\t\treturn params;\r\n\t\t}\r\n\t\tlet sortingParams: any[] = [];\r\n\t\tparams.sort.forEach((pagingInfo: IPaginationSorting) => {\r\n\t\t\tlet info = [pagingInfo.property,pagingInfo.direction].join(\",\");\r\n\t\t\tsortingParams.push(info);\r\n\t\t});\r\n\t\tparams.sort = sortingParams;\r\n\t\treturn params;\r\n\t}\r\n\t/**\r\n\t * Executado cada vez que uma nova requisição é respondida. Emite o evento que indica que uma nova página foi carregada.\r\n\t * @param {IPaginationResult<T>} paginationResult\r\n\t * @see {@link Pagination#onPageLoad}\r\n\t */\r\n\tprivate onPaginationResultReceived(paginationResult:IPaginationResult<T>): void {\r\n\t\tthis.paginationResult = paginationResult;\r\n\t\tthis.calculateVisiblePageNumbers();\r\n\t\tthis.store.set(paginationResult.content);\r\n\t\tthis.refresh();\r\n\t}\r\n\t/**\r\n\t * Calcula os números das páginas que devem ser exibidos nos links da paginação. O cálculo é baseado na propriedade \r\n\t * {@link Pagination.visiblePageNumbersTotal}, que diz a quantidade de links que deve ser exibida.\r\n\t */\r\n\tprivate calculateVisiblePageNumbers(startPage?: number): void {\r\n\t\tthis.visiblePageNumbersTotal = (this.visiblePageNumbersTotal === 0) ? this.paginationResult.totalPages : this.visiblePageNumbersTotal;\r\n\t\tstartPage = (!startPage) ? (this.paginationResult.number + 1) : startPage;\r\n\t\tstartPage = (startPage > this.paginationResult.totalPages) ? this.paginationResult.totalPages : startPage;\r\n\t\tlet lastVisiblePageNumber = this.visiblePageNumbers[this.visiblePageNumbers.length - 1];\r\n\t\tlet isLastGroup = lastVisiblePageNumber === this.paginationResult.totalPages;\r\n\t\tlet totalPageNumbers = this.visiblePageNumbersTotal;\r\n\t\tif (this.pageSize >= this.paginationResult.totalPages || (this.paginationResult.totalPages > this.pageSize && totalPageNumbers > this.paginationResult.totalPages)) {\r\n\t\t\tstartPage = 1;\r\n\t\t\ttotalPageNumbers = this.paginationResult.totalPages;\r\n\t\t} else if ((!((startPage % this.visiblePageNumbersTotal) === 1 || (startPage % this.visiblePageNumbersTotal === 0)) || (startPage % this.visiblePageNumbersTotal === 0)) && !isLastGroup) {\r\n\t\t\tfor (let p = startPage; p > 0; p--) {\r\n\t\t\t\tif (p % this.visiblePageNumbersTotal === 1) {\r\n\t\t\t\t\tstartPage = p;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t} else if (startPage + this.visiblePageNumbersTotal > this.paginationResult.totalPages) {\r\n\t\t\tstartPage = (this.paginationResult.totalPages - (this.visiblePageNumbersTotal - 1));\r\n\t\t}\r\n\t\tif (this.needsRecalculateVisiblePageNumbers(startPage)) {\r\n\t\t\tlet arr = Array.apply(null, Array(totalPageNumbers));        \r\n\t\t\tthis.visiblePageNumbers = arr.map((x: number, i: number) => (startPage + i));\r\n\t\t}\r\n\t}\r\n\t/**\r\n\t * Verifica a necessidade de se recalcular os números das páginas exibidas nos links de paginação.\r\n\t */\r\n\tprivate needsRecalculateVisiblePageNumbers(startPage: number): boolean {\r\n\t\treturn true;\r\n\t}\r\n\t/**\r\n\t * Calcula os próximos números que devem ser exibidos nos links de paginação.\r\n\t */\r\n\tprivate nextVisiblePageNumbers(): void {        \r\n\t\tlet lastVisiblePageNumber: number = this.visiblePageNumbers[this.visiblePageNumbers.length - 1];\r\n\t\tif (lastVisiblePageNumber >= this.paginationResult.totalPages) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tthis.calculateVisiblePageNumbers(lastVisiblePageNumber + 1);\r\n\t\tthis.refresh();     \r\n\t}\r\n\t/**\r\n\t * Calcula os números anteriores que devem ser exibidos nos links de paginação.\r\n\t */\r\n\tprivate previousVisiblePageNumbers(): void {\r\n\t\tlet firstVisiblePageNumber: number = this.visiblePageNumbers[0];\r\n\t\tlet page: number = firstVisiblePageNumber - this.visiblePageNumbersTotal;\r\n\t\tpage = (page <= 0 ? 1 : page);\r\n\t\tif (firstVisiblePageNumber === 1 || page < 0) {\r\n\t\t\treturn;\r\n\t\t}        \r\n\t\tthis.calculateVisiblePageNumbers(page);\r\n\t\tthis.refresh();     \r\n\t}\r\n\t/**\r\n\t * Carrega uma página de acordo com o parâmetro informado.\r\n\t */\r\n\tprivate requestPage(page: number): void {\r\n\t\t//verificar o porquê da orden\r\n\t\tlet request: IPaginationRequest = {\r\n\t\t\t\"page\": page,\r\n\t\t\t\"size\": this.pageSize\r\n\t\t};\r\n\t\tif (this.lastPaginationRequest && this.lastPaginationRequest.sort) {\r\n\t\t\trequest.sort = this.lastPaginationRequest.sort;\r\n\t\t}\r\n\t\tif (this.lastPaginationRequest) {\r\n\t\t\tdelete this.lastPaginationRequest.page;\r\n\t\t\tdelete this.lastPaginationRequest.size;\r\n\t\t\trequest = <IPaginationRequest>jquery.extend({}, request, this.lastPaginationRequest);\r\n\t\t}\r\n\t\tthis.loadPage(request);\r\n\t}\r\n\r\n\tprivate refresh(): void {\r\n\t\t(<ICustomComponent>this).refreshRender();\r\n\t}\r\n\r\n\tprivate getNavigationButtonClass(btn :string): string {\r\n\t\tswitch (btn) {\r\n\t\t\tcase \"prev\":\r\n\t\t\t\treturn (this.visiblePageNumbers[0] === 1) ? \"disabled\" : \"\";\r\n\t\t\tcase \"next\":                \r\n\t\t\t\treturn (this.visiblePageNumbers[this.visiblePageNumbers.length-1] === this.paginationResult.totalPages) ? \"disabled\" : \"\";\r\n\t\t\tdefault:\r\n\t\t\t\treturn \"\";\r\n\t\t}        \r\n\t}\r\n\r\n}\r\n"]}