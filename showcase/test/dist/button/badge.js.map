{"version":3,"sources":["../src/button/badge.ts"],"names":[],"mappings":";;;IA4BA;QAA2B,iCAAO;QAEjC,eAAY,KAAa;YAAzB,YACC,kBAAM,MAAM,CAAC,SAGb;YAFA,MAAM,CAAC,KAAI,CAAC,OAAO,CAAC,CAAC,QAAQ,CAAC,uBAAuB,CAAC,CAAC;YACvD,KAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;;QACtB,CAAC;QAYM,wBAAQ,GAAf,UAAgB,KAAa;YAC5B,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;YACjC,MAAM,CAAC,IAAI,CAAC;QACb,CAAC;QAYM,0BAAU,GAAjB,UAAkB,OAAe;YAChC,EAAE,CAAC,CAAE,OAAQ,CAAC,CAAC,CAAC;gBACf,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC;YAC7C,CAAC;YAAC,IAAI,CAAC,CAAC;gBACP,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC;YAC1C,CAAC;YACD,MAAM,CAAC,IAAI,CAAC;QACb,CAAC;QAaM,wBAAQ,GAAf,UAAgB,KAAwB;YACvC,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC;iBAClB,WAAW,CACX,IAAI,CAAC,SAAS,EAAE,CAChB;iBACA,QAAQ,CAAC,WAAS,wCAAiB,CAAC,KAAK,CAAC,CAAC,WAAW,EAAI,CAAC,CAAC;YAC9D,MAAM,CAAC,IAAI,CAAC;QACb,CAAC;QACF,YAAC;IAAD,CA7DA,AA6DC,CA7D0B,kBAAO,GA6DjC;IA7DY,sBAAK","file":"badge.js","sourcesContent":["import \"./assets/css/badge.css!\";\r\nimport jquery = require(\"jquery\");\r\nimport {AButton} from \"./abstract/a-button\";\r\nimport {EBasicColorStatus} from \"../component/enum/e-basic-color-status\";\r\n\r\n/** \r\n * @classdesc Componente que simula tags \r\n * \r\n * <img src=\"../../doc_assets/badge_example_1.png\" />\r\n *\r\n * @example\r\n * \r\n * import {Badge} from \"mvcomponents/button\";\r\n * import {EBasicColorStatus} from \"mvcomponents/component\";\r\n * \r\n * let danger:Badge = new Badge(\"DANGER\").setColor(EBasicColorStatus.DANGER);\r\n * let info:Badge = new Badge(\"INFO\").setColor(EBasicColorStatus.INFO);\r\n * let primary:Badge = new Badge(\"PRIMARY\").setColor(EBasicColorStatus.PRIMARY);\r\n * let sucess:Badge = new Badge(\"SUCCESS\").setColor(EBasicColorStatus.SUCCESS);\r\n * let warning:Badge = new Badge(\"WARNING\").setColor(EBasicColorStatus.WARNING);\r\n * \r\n * this.append(danger).append(info).append(primary).append(sucess).append(warning);\r\n * \r\n * @export\r\n * @extends {AButton}\r\n * @param {string} [label] Rótulo do Badge.\r\n * @memberof module:mvcomponents/button\r\n */\r\nexport class Badge extends AButton {\r\n\r\n\tconstructor(label?:string) {\r\n\t\tsuper(\"span\");\r\n\t\tjquery(this.element).addClass(\"badge ButtonComponent\");\r\n\t\tthis.setLabel(label);\r\n\t}\r\n\t/**\r\n\t * Atribui ou substitui o rótulo do Button\r\n\t * \r\n\t * @example\r\n\t * \r\n\t * let danger:Badge = new Badge(\"Label\");\r\n\t * badge.setLabel(\"DANGER\");\r\n\t * \r\n\t * @param  {string} label Texto que deve substituir a label do Badge.\r\n\t * @return {Badge}\r\n\t */\r\n\tpublic setLabel(label: string): this {\r\n\t\tjquery(this.element).text(label);\r\n\t\treturn this;\r\n\t}\r\n\t/**\r\n\t * Atribui ou substitui o Tooltip do Button\r\n\t * \r\n\t * @example\r\n\t * \r\n\t * let badge:Badge = new Badge(\"Tooltip\").setColor(EBasicColorStatus.DANGER);\r\n\t * badge.setTooltip('Tooltip do badge');\r\n\t * \r\n\t * @param {string} tooltip Texto que deve ser exibido no Tooltip.\r\n\t * @return {Badge}\r\n\t */\r\n\tpublic setTooltip(tooltip: string): this {\r\n\t\tif ( tooltip ) {\r\n\t\t\tjquery(this.element).attr(\"title\", tooltip);\r\n\t\t} else {\r\n\t\t\tjquery(this.element).removeAttr(\"title\");\r\n\t\t}\r\n\t\treturn this;\r\n\t}\r\n\t/**\r\n\t * Informa a cor do botão.\r\n\t * \r\n\t * Obs.: Utiliza o EBasicColorStatus do grupo 'mvcomponents/component' para definir a cor do Badge.\r\n\t * \r\n\t * @example\r\n\t * \r\n\t * let danger:Badge = new Badge(\"DANGER\").setColor(EBasicColorStatus.DANGER);\r\n\t * \r\n\t * @param  {EBasicColorStatus} color EBasicColorStatus do grupo 'mvcomponents/component' para definir a cor do Badge\r\n\t * @return {Badge}\r\n\t */\r\n\tpublic setColor(color: EBasicColorStatus): this {\r\n\t\tjquery(this.element)\r\n\t\t\t.removeClass(\r\n\t\t\t\tthis.getColors()\r\n\t\t\t)\r\n\t\t\t.addClass(`badge-${EBasicColorStatus[color].toLowerCase()}`);\r\n\t\treturn this;\r\n\t}\r\n}\r\n"]}