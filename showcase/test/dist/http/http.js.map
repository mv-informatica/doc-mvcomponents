{"version":3,"sources":["../src/http/http.ts"],"names":[],"mappings":";;;IAuCA;QAOC;YAJO,aAAQ,GAAmB;gBACjC,MAAM,EAAE,MAAM;gBACd,WAAW,EAAE,iCAAiC;aAC9C,CAAC;YAED,IAAI,CAAC,aAAa,GAAG,UAAC,MAAM,IAAK,OAAA,MAAM,EAAN,CAAM,CAAC;QACzC,CAAC;QACD,sBAAW,8BAAM;iBAAjB,UAAkB,MAAc;gBAC/B,IAAI,CAAC,QAAQ,CAAC,MAAM,GAAG,MAAM,CAAC;YAC/B,CAAC;;;WAAA;QACD,sBAAW,mCAAW;iBAAtB,UAAuB,WAAmB;gBACzC,IAAI,CAAC,QAAQ,CAAC,WAAW,GAAG,WAAW,CAAC;YACzC,CAAC;;;WAAA;QACO,qCAAgB,GAAxB,UAAyB,MAAsB;YAC9C,IAAI,CAAC,GAAG,MAAM,CAAC,MAAM,CAAC,EAAE,EAAE,IAAI,CAAC,QAAQ,EAAE,MAAM,CAAC,CAAC;YACjD,CAAC,CAAC,GAAG,GAAG,MAAG,MAAM,CAAC,OAAO,GAAG,MAAM,CAAC,OAAO,GAAG,EAAE,IAAG,MAAM,CAAC,GAAK,CAAC;YAC/D,CAAC,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,MAAM,CAAC;YACrB,MAAM,CAAC,CAAC,CAAC;QACV,CAAC;QACO,0CAAqB,GAA7B,UAAiC,MAAa,EAAE,GAAW,EAAE,MAA2B;YAA3B,uBAAA,EAAA,WAA2B;YACvF,MAAM,CAAC,MAAM,CAAC,MAAM,EAAE,EAAE,GAAG,KAAA,EAAE,MAAM,QAAA,EAAE,CAAC,CAAC;YACvC,MAAM,CAAC,IAAI,iBAAO,CACjB,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,gBAAgB,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;QACrD,CAAC;QACM,8BAAS,GAAhB,UAAiB,MAAwC;YACxD,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;QACvB,CAAC;QASM,wBAAG,GAAV,UAAc,GAAW,EAAE,MAAuB;YACjD,MAAM,CAAC,IAAI,CAAC,qBAAqB,CAAC,KAAK,EAAE,GAAG,EAAE,MAAM,CAAC,CAAC;QACvD,CAAC;QASM,2BAAM,GAAb,UAAiB,GAAW,EAAE,MAAuB;YACpD,MAAM,CAAC,IAAI,CAAC,qBAAqB,CAAC,QAAQ,EAAE,GAAG,EAAE,MAAM,CAAC,CAAC;QAC1D,CAAC;QASM,yBAAI,GAAX,UAAe,GAAW,EAAE,MAAuB;YAClD,MAAM,CAAC,IAAI,CAAC,qBAAqB,CAAC,MAAM,EAAE,GAAG,EAAE,MAAM,CAAC,CAAC;QACxD,CAAC;QASM,wBAAG,GAAV,UAAc,GAAW,EAAE,MAAuB;YACjD,MAAM,CAAC,IAAI,CAAC,qBAAqB,CAAC,KAAK,EAAE,GAAG,EAAE,MAAM,CAAC,CAAC;QACvD,CAAC;QASM,2BAAM,GAAb,UAAiB,GAAW,EAAE,MAA2B;YAA3B,uBAAA,EAAA,WAA2B;YACxD,MAAM,CAAC,MAAM,CAAC,MAAM,EAAE;gBACrB,GAAG,KAAA;gBACH,MAAM,EAAE,MAAM;gBACd,WAAW,EAAE,KAAK;gBAClB,WAAW,EAAE,KAAK;gBAClB,MAAM,EAAE,IAAI;aACZ,CAAC,CAAC;YACH,MAAM,CAAC,IAAI,2BAAiB,CAAC,IAAI,CAAC,gBAAgB,CAAC,MAAM,CAAC,CAAC,CAAC;QAC7D,CAAC;QACF,iBAAC;IAAD,CA5FA,AA4FC,IAAA;IA5FY,gCAAU;IA8FZ,QAAA,KAAK,GAAG,IAAI,UAAU,EAAE,CAAC","file":"http.js","sourcesContent":["import \"es6-shim\";\r\nimport {IErrorResponse} from \"./interface/i-error-response\";\r\nimport {IRequestConfig} from \"./interface/i-request-config\";\r\nimport {SimplestRequest, Request, FileUploadRequest} from \"./request\";\r\n\r\n/**\r\n * Executa um ajax request\r\n * \r\n * @example                 \r\n *  $http\r\n *      .get(\"friends/actives\")\r\n *      .then((res:IFriend[])=>console.log(res));\r\n * \r\n * @example \r\n *  $http\r\n *      .get(\"friends/actives\")\r\n *      .params({order:\"name\"})\r\n *      .then((res:IFriend[])=>console.log(res)); \r\n *    \r\n * @example\r\n *  $http\r\n *      .post(\"friends\")\r\n *      .body(newFriend)\r\n *      .then((res:IFriend[])=>console.log(res));   \r\n *  \r\n * @example \r\n *  $http\r\n *      .put(\"friends\")\r\n *      .body(newFriend)\r\n *      .then((res:IFriend[])=>console.log(res));   \r\n *   \r\n * @example \r\n *  $http\r\n *      .get(\"friends/actives\")\r\n *      .then((res:IFriend[])=>console.log(res),(error:any) => console.log(error));\r\n * \r\n * @class $http\r\n * @memberof module:mvcomponents/http\r\n*/\r\nexport class HttpStatic {\r\n\tpublic rootUrl: string;\r\n\tpublic beforeRequest: (config:IRequestConfig) => IRequestConfig;\r\n\tpublic defaults: IRequestConfig = {\r\n\t\tformat: \"json\",\r\n\t\tcontentType: \"application/json; charset=utf-8\"\r\n\t};\r\n\tconstructor(){\r\n\t\tthis.beforeRequest = (config) => config;\r\n\t}\r\n\tpublic set format(format: string) {\r\n\t\tthis.defaults.format = format;\r\n\t}\r\n\tpublic set contentType(contentType: string) {\r\n\t\tthis.defaults.contentType = contentType;\r\n\t}\r\n\tprivate getDefaultConfig(config: IRequestConfig): IRequestConfig {\r\n\t\tlet r = Object.assign({}, this.defaults, config);\r\n\t\tr.url = `${config.rootUrl ? config.rootUrl : \"\"}${config.url}`;\r\n\t\tr[\"type\"] = r.format;\r\n\t\treturn r;\r\n\t}\r\n\tprivate getDefaultTaskRequest<T>(method:string, url: string, config: IRequestConfig = {}): Request<T> {\r\n\t\tObject.assign(config, { url, method });\r\n\t\treturn new Request(\r\n\t\t\tthis.beforeRequest(this.getDefaultConfig(config)));\r\n\t}\r\n\tpublic configure(method: (config: IRequestConfig) => void) {\r\n\t\tmethod(this.defaults);\r\n\t}\r\n\t/**\r\n\t * Executa uma requisição ajax do tipo `GET` \r\n\t * \r\n\t * @template T\r\n\t * @param {string} url\r\n\t * @param {IRequestConfig} [config]\r\n\t * @returns {SimplestRequest<T>}\r\n\t */\r\n\tpublic get<T>(url: string, config?: IRequestConfig): SimplestRequest<T> {\r\n\t\treturn this.getDefaultTaskRequest(\"GET\", url, config);\r\n\t}\r\n\t/**\r\n\t * Executa uma requisição ajax do tipo `DELETE` \r\n\t * \r\n\t * @template T\r\n\t * @param {string} url\r\n\t * @param {IRequestConfig} [config]\r\n\t * @returns {Request<T>}\r\n\t */\r\n\tpublic delete<T>(url: string, config?: IRequestConfig): Request<T> {\r\n\t\treturn this.getDefaultTaskRequest(\"DELETE\", url, config);\r\n\t}\r\n\t/**\r\n\t * Executa uma requisição ajax do tipo `POST` \r\n\t * \r\n\t * @template T\r\n\t * @param {string} url\r\n\t * @param {IRequestConfig} [config]\r\n\t * @returns {Request<T>}\r\n\t */\r\n\tpublic post<T>(url: string, config?: IRequestConfig): Request<T> {\r\n\t\treturn this.getDefaultTaskRequest(\"POST\", url, config);\r\n\t}\r\n\t/**\r\n\t * Executa uma requisição ajax do tipo `PUT` \r\n\t * \r\n\t * @template T\r\n\t * @param {string} url\r\n\t * @param {IRequestConfig} [config]\r\n\t * @returns {Request<T>}\r\n\t */\r\n\tpublic put<T>(url: string, config?: IRequestConfig): Request<T> {\r\n\t\treturn this.getDefaultTaskRequest(\"PUT\", url, config);\r\n\t}\r\n\t/**\r\n\t * Executa uma requisição de file upload\r\n\t * \r\n\t * @template T\r\n\t * @param {string} url\r\n\t * @param {IRequestConfig} [config]\r\n\t * @returns {FileUploadRequest<T>}\r\n\t */\r\n\tpublic upload<T>(url: string, config: IRequestConfig = {}): FileUploadRequest<T> {\r\n\t\tObject.assign(config, {\r\n\t\t\turl,\r\n\t\t\tmethod: \"POST\",\r\n\t\t\tprocessData: false,\r\n\t\t\tcontentType: false,\r\n\t\t\tformat: null\r\n\t\t});\r\n\t\treturn new FileUploadRequest(this.getDefaultConfig(config));\r\n\t}\r\n}\r\n\r\nexport var $http = new HttpStatic();\r\n"]}