{"version":3,"sources":["../src/datagrid/paginated-data-grid.ts"],"names":[],"mappings":"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","file":"paginated-data-grid.js","sourcesContent":["import jquery = require(\"jquery\");\r\nimport {EventEmitter} from \"../core/event-emitter\";\r\nimport {IStore} from \"../store/interface/i-store\";\r\nimport { EKeyboardEvent } from \"../component/enum/e-keyboard-event\";\r\nimport { Box } from \"../container/box\";\r\nimport { TextInput } from \"../input/text-input\";\r\nimport { Select } from \"../input/select\";\r\nimport { EGridStyle, EDataGridSortingDirection } from \"./enum/e-data-grid\";\r\nimport { IDataGrid, IDataGridColumn } from \"./interface/i-data-grid\";\r\nimport { IPagination, IPaginationRequest } from \"../pagination/interface/i-pagination\";  \r\nimport { Pagination } from \"../pagination/pagination\";\r\nimport { DataGrid } from \"./data-grid\";\r\n\r\nexport interface IPageSize {\r\n\tvalue: number;\r\n\tdescription: string;\r\n}\r\n\r\n/**\r\n * <img src=\"../../doc_assets/grid2_example.png\" title=\"PaginatedDataGrid\" alt=\"PaginatedDataGrid\">\r\n * \r\n * Exibe um {@link DataGrid} paginado por um {@link Pagination}, que pode ser filtrado.\r\n * O Filtro é aplicado apenas localmente, ou seja, não é feita nenhuma requisição aplicando o filtro, somente\r\n * os dados exibidos na página atual é que serão filtrados.\r\n * \r\n * @memberof module:mvcomponents/datagrid\r\n * \r\n * @example\r\n *  interface Pessoa {\r\n *      id: number;\r\n *      nome: string;\r\n *      sobrenome: string;\r\n *      idade: string;\r\n *      pais: string;\r\n *  }\r\n * \r\n *  let paginatedDataGrid = new PaginatedDataGrid<Pessoa>(\"/dist/mv-starter/pessoa/pagination\");\r\n *  paginatedDataGrid.setColumns([\r\n *      {name: \"nome\", title: \"Nome\", sortable: true, width: 25},\r\n *      {name: \"sobrenome\", title: \"Sobrenome\", sortable: true, width: 25},\r\n *      {name: \"idade\", title: \"Idade\", sortable: true, width: 25},\r\n *      {name: \"pais\", title: \"País\", sortable: true, width: 25}\r\n *  ])\r\n *  .addTableStyle(EGridStyle.TABLE_STRIPED)\r\n *  .loadPage({\"page\": 0, \"size\": 3})\r\n *  .setEmptyText(\"Sem dados para exibir\")\r\n *  .getFilterInput().setLabel(\"Filtro\");\r\n */\r\nexport class PaginatedDataGrid<T> extends Box {\r\n\r\n\tprivate filterInput: TextInput; \r\n\tprivate grid: IDataGrid<T>;\r\n\tprivate pagination: IPagination<T>;\r\n\tprivate store: IStore<T>;\r\n\tprivate pageSizeSelect: Select<IPageSize>;\r\n\tprivate possiblePageSizes: number[] = [];\r\n\tprivate bottom:number;\r\n\tpublic onItemSelect: EventEmitter<T>;\r\n\tpublic onSortingChange: EventEmitter<IDataGridColumn<T>[]>;\r\n\tpublic onDoubleClick: EventEmitter<T>;\r\n\t\r\n\t/**\r\n\t * Inicia o componente com uma URL base para as requisições de paginação\r\n\t * @param {string} baseURL - URL base para as requisições de paginação\r\n\t * @see {@link Pagination}\r\n\t * @return {this}\r\n\t */\r\n\tconstructor(baseURL: string) {\r\n\t\tsuper();\r\n\t\tjquery(this.element).addClass(\"PaginatedDataGrid\");    \r\n\t\tthis.filterInput = new TextInput().setVisible(false);\r\n\t\tthis.pageSizeSelect = new Select<IPageSize>().setVisible(false);\r\n\t\t//this.filterInput.addEvent(EKeyboardEvent.KEYUP, () => this.filterGrid());\r\n\t\tthis.grid = new DataGrid<T>();        \r\n\t\tthis.onItemSelect = this.grid.onItemSelect;\r\n\t\tthis.onSortingChange = this.grid.onSortingChange;\r\n\t\tthis.onDoubleClick = this.grid.onDoubleClick;\r\n\t\tthis.pagination = new Pagination<T>(baseURL);\r\n\t\tthis.subscribeToGrid();\r\n\t\tthis.subscribeToPagination();\r\n\t\tthis.buildBasicStore();\r\n\t}\r\n\t/**\r\n\t * Atribui as colunas da grid\r\n\t * @param {IDataGridColumn[]} columns - Colunas a serem exibidas\r\n\t * @see {@link DataGrid#setColumns}\r\n\t * @return {this}\r\n\t */\r\n\tpublic setColumns(columns: IDataGridColumn<T>[]): this {\r\n\t\tthis.grid.setColumns(columns);\r\n\t\treturn this;\r\n\t}\r\n\t/**\r\n\t * Atribui o estilo da grid\r\n\t * @param {EGridStyle[]} style\r\n\t * @see {@link DataGrid#addTableStyle}\r\n\t * @return {this}\r\n\t */\r\n\tpublic addTableStyle(...style: EGridStyle[]): this {\r\n\t\tthis.grid.addTableStyle(...style);\r\n\t\treturn this;\r\n\t}\r\n\t/**\r\n\t * Requisita uma página da grid\r\n\t * @param {IPaginationRequest} params - Parâmetros da requisição de paginação.\r\n\t * @param {string} url - url utilizada para recuperação do registros.\r\n\t * @see {@link Pagination#loadPage}\r\n\t * @return {this}\r\n\t */\r\n\tpublic loadPage(params: IPaginationRequest, url?:string): this {\r\n\t\tthis.store.onChange.once(() => {\r\n\t\t\tthis.choosePageSize(params.size);\r\n\t\t});\r\n\t\tthis.pagination.loadPage(params, url);\r\n\t\treturn this;\r\n\t}\r\n\t/**\r\n\t * Configura o texto a ser exibido caso não hajam dados na grid\r\n\t * @param {string} text - texto a ser exibido caso não hajam dados na grid\r\n\t * @see {@link DataGrid.setEmptyText}\r\n\t * @return {this}\r\n\t */\r\n\tpublic setEmptyText(text: string): this {\r\n\t\tthis.grid.setEmptyText(text);\r\n\t\treturn this;\r\n\t}\r\n\t/**\r\n\t * Retorna o campo que representa o filtro da grid\r\n\t * @return {this}\r\n\t */\r\n\tpublic getFilterInput(): TextInput {\r\n\t\tconsole.warn(\"mv-components: metodo 'PaginatedDataGrid.getFilterInput' será descontinuado apartir da versão 1.1.0!\");\r\n\t\treturn this.filterInput;\r\n\t}\r\n\t/**\r\n\t * Retorna a instancia do {@link IDataGrid} utilizado por este componente.\r\n\t * @see {@link DataGrid}\r\n\t * @return {IDataGrid<T>}\r\n\t */\r\n\tpublic getGrid(): IDataGrid<T> {\r\n\t\treturn this.grid;\r\n\t}\r\n\t/**\r\n\t * Retorna a instancia do {@link IPagination} utilizado por este componente.\r\n\t * @see {@link Pagination}\r\n\t * @return {IPagination<T>}\r\n\t */\r\n\tpublic getPagination(): IPagination<T> {\r\n\t\treturn this.pagination;\r\n\t}\r\n\t/**\r\n\t * Configura a {@link IStore<T>} que será tualizada a cada nova requisição para atualização da grid.\r\n\t * @param {IStore<T>} store\r\n\t * @return {this}\r\n\t */\r\n\tpublic setStore(store: IStore<T>): this {\r\n\t\tthis.store = store;\r\n\t\tthis.store.onChange.subscribe(() => {\r\n\t\t\tthis.grid.setData(this.store.get());\r\n\t\t});\r\n\t\tthis.pagination.setStore(store);\r\n\t\treturn this;\r\n\t}\r\n\t/**\r\n\t * Retorna a {@link IStore<T>} configurada para receber os dados da paginação\r\n\t * return {IStore<T>}\r\n\t */\r\n\tpublic getStore(): IStore<T> {\r\n\t\treturn this.store;\r\n\t}\r\n\t/**\r\n\t * Limpa completamente os dados da paginação e da grid\r\n\t */\r\n\tpublic clear(): this {\r\n\t\tthis.getPagination().clear();\r\n\t\treturn this;\r\n\t}\r\n\tpublic attached() : void{\r\n\t\tthis.append(this.filterInput);\r\n\t\tthis.buildPageSizeSelect();\r\n\t\tthis.append(this.grid);\r\n\t\tthis.append(this.pagination);\r\n\t\tif(this.bottom){\r\n\t\t\tlet parent = jquery(this.element).parent();\r\n\t\t\tlet prevElement = jquery(this.element).prev();\r\n\t\t\tlet top = 0;\r\n\t\t\tif(parent.offset()){\r\n\t\t\t\ttop = parent.offset().top;\r\n\t\t\t}            \r\n\t\t\tif(prevElement.length && prevElement.offset()){\r\n\t\t\t\ttop = prevElement.offset().top;\r\n\t\t\t}            \r\n\t\t\tjquery(this.element).css(\"height\",`calc( 100% - ${(this.bottom+top)}px )`);\r\n\t\t}\r\n\t\tthis.grid.attached();\r\n\r\n\t}\r\n\tpublic getPageSizeSelect(): Select<IPageSize> {\r\n\t\tconsole.warn(\"mv-components: metodo 'PaginatedDataGrid.getPageSizeSelect' será descontinuado apartir da versão 1.1.0!\");\r\n\t\treturn this.pageSizeSelect;\r\n\t}\r\n\tpublic setPossiblePageSizes(...pageSizes:number[]): this {\r\n\t\tthis.possiblePageSizes = pageSizes;\r\n\t\treturn this;\r\n\t}\r\n\tprivate subscribeToGrid(): void {\r\n\t\tthis.grid.onSortingChange.subscribe((cols) => this.loadSortedPage(cols));\r\n\t}\r\n\tprivate loadSortedPage(cols: IDataGridColumn<T>[]): void {\r\n\t\tlet sort: any[] = [];\r\n\t\tcols.forEach((c: IDataGridColumn<T>) => {\r\n\t\t\tlet direction = (c.sortingDirection === EDataGridSortingDirection.ASCENDING) ? \"asc\" : \"desc\";\r\n\t\t\tsort.push({\"property\": c.name, \"direction\": direction});\r\n\t\t});\r\n\t\tlet lastParams = <IPaginationRequest>jquery.extend({}, this.pagination.getLastPaginationRequest());\r\n\t\tdelete lastParams.page;\r\n\t\tdelete lastParams.sort;\r\n\t\tlet sortingParams = {\r\n\t\t\tpage: this.pagination.getLastPaginationRequest().page,\r\n\t\t\tsort: sort\r\n\t\t};\r\n\t\tthis.pagination.loadPage(<IPaginationRequest>jquery.extend(lastParams, sortingParams));\r\n\t}\r\n\tprivate subscribeToPagination(): void {\r\n\t\tthis.pagination.setStore(this.store);\r\n\t}\r\n\tprivate buildPageSizeSelect(): void {\r\n\t\tthis.pageSizeSelect.addStyleName(\"pull-right\");\r\n\t\tthis.pageSizeSelect.setValueField(\"value\");\r\n\t\tthis.pageSizeSelect.setDescriptionField(\"description\");\r\n\t\tthis.pageSizeSelect.setSize(2);\r\n\t\tthis.pageSizeSelect.onSelect.subscribe((selection)=>this.changePageSize(selection[0]));\r\n\t\tlet data: IPageSize[] = [];\r\n\t\tthis.getPageSizes().forEach( (size) => {\r\n\t\t\tdata.push({\r\n\t\t\t\tdescription: new String(size).toString(),\r\n\t\t\t\tvalue: size\r\n\t\t\t});\r\n\t\t});\r\n\t\tthis.pageSizeSelect.setData(data);\r\n\t\tthis.append(this.pageSizeSelect);\r\n\t}\r\n\tprivate getPageSizes(): number[] {\r\n\t\treturn (this.possiblePageSizes.length > 0) ? this.possiblePageSizes : [10, 25, 50, 100];\r\n\t}\r\n\tprivate changePageSize(pageSize: IPageSize): void {\r\n\t\tlet lastPaginationRequest = this.pagination.getLastPaginationRequest();\r\n\t\tlet lastPaginationResult = this.pagination.getLastPaginationResult();\r\n\t\tif (lastPaginationResult) {\r\n\t\t\tif (lastPaginationResult.totalElements <= pageSize.value) {\r\n\t\t\t\tlastPaginationRequest.page = 0;\r\n\t\t\t}\r\n\t\t}\r\n\t\tlastPaginationRequest.size = pageSize.value;\r\n\t\tthis.loadPage(lastPaginationRequest);\r\n\t}\r\n\tprivate choosePageSize(pageSize:number): void {\r\n\t\tif (pageSize !== undefined && this.getPageSizes().indexOf(pageSize) !== -1) {\r\n\t\t\tthis.pageSizeSelect.setValue({description: new String(pageSize).toString(), value: pageSize});\r\n\t\t}        \r\n\t}\r\n\tprivate buildBasicStore(): void {\r\n\t\tthis.setStore(new BasicPaginationStore<T>());\r\n\t}\r\n\tpublic setBotton(bottom:number):this{\r\n\t\tthis.bottom = bottom;\r\n\t\treturn this; \r\n\t}\r\n\r\n}\r\n\r\nclass BasicPaginationStore<T> implements IStore<T> {\r\n\r\n\tprivate data: T[] = [];\r\n\r\n\tpublic onChange: EventEmitter<any> = new EventEmitter();\r\n\t\r\n\tpublic get(): T[] {\r\n\t\treturn this.data;\r\n\t}\r\n\r\n\tpublic set(data: T[]): void {\r\n\t\tthis.data = data;\r\n\t\tthis.onChange.emit(null);\r\n\t}\r\n\r\n}\r\n"]}