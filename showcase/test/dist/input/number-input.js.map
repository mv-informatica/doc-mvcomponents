{"version":3,"sources":["../src/input/number-input.ts"],"names":[],"mappings":";;;IAsBA;QAAiC,uCAAc;QAC9C,qBAAY,KAAc;YAAd,sBAAA,EAAA,SAAc;YAA1B,YACC,kBAAM,QAAQ,EAAE,KAAG,KAAO,CAAC,SAE3B;YADA,KAAI,CAAC,YAAY,CAAC,uBAAuB,CAAC,CAAC;;QAC5C,CAAC;QAYM,4BAAM,GAAb,UAAc,KAAY;YACzB,IAAI,CAAC,QAAQ,EAAE,CAAC,IAAI,CAAC,KAAK,EAAC,KAAK,CAAC,CAAC;YAClC,MAAM,CAAC,IAAI,CAAC;QACb,CAAC;QAYM,4BAAM,GAAb,UAAc,KAAY;YACzB,IAAI,CAAC,QAAQ,EAAE,CAAC,IAAI,CAAC,KAAK,EAAC,KAAK,CAAC,CAAC;YAClC,MAAM,CAAC,IAAI,CAAC;QACb,CAAC;QAYM,6BAAO,GAAd,UAAe,KAAY;YAC1B,IAAI,CAAC,QAAQ,EAAE,CAAC,IAAI,CAAC,MAAM,EAAC,KAAK,CAAC,CAAC;YACnC,MAAM,CAAC,IAAI,CAAC;QACb,CAAC;QACS,4BAAM,GAAhB,UAAiB,KAAa;YAC7B,MAAM,CAAC,KAAK,IAAI,KAAK,CAAC,QAAQ,EAAE,CAAC;QAClC,CAAC;QAES,4BAAM,GAAhB,UAAiB,KAAa;YAC7B,MAAM,CAAC,KAAK,IAAI,UAAU,CAAC,KAAK,CAAC,CAAC;QACnC,CAAC;QACF,kBAAC;IAAD,CAzDA,AAyDC,CAzDgC,gBAAM,GAyDtC;IAzDY,kCAAW","file":"number-input.js","sourcesContent":["import {AInput} from \"./abstract/a-input\";\r\nimport {InputAddon} from \"./input-addon\";\r\n\r\n/**\r\n * @classdesc Componente utilizado para renderizar input somente com números\r\n * \r\n * @example\r\n * \r\n * import {NumberInput} from \"mvcomponents/input\";\r\n * \r\n * let numberInput:NumberInput = new NumberInput(3)\r\n *      .setMin(1)\r\n *      .setMax(10)\r\n *      .setStep(1);\r\n * \r\n * this.append(numberInput);\r\n * \r\n * @export\r\n * @extends {AInput}\r\n * @param {number} value Altera o valor do campo.\r\n * @memberof module:mvcomponents/input\r\n */\r\nexport class NumberInput extends AInput<number> {\r\n\tconstructor(value:number=0){\r\n\t\tsuper(\"number\", `${value}`);\r\n\t\tthis.addStyleName(\"NumberInput InputText\");\r\n\t}\r\n\t/**\r\n\t * Alterar o valor mínimo aceitado pelo campo.\r\n\t * \r\n\t * @example\r\n\t * \r\n\t * let numberInput:NumberInput = new NumberInput(3)\r\n\t *     .setMin(1);\r\n\t * \r\n\t * @param {number} value Valor mínimo do campo.\r\n\t * @return {NumberInput}\r\n\t */\r\n\tpublic setMin(value:number):this{\r\n\t\tthis.getInput().attr(\"min\",value);\r\n\t\treturn this;\r\n\t}\r\n\t/**\r\n\t * Alterar o valor máximo aceitado pelo campo.\r\n\t * \r\n\t * @example\r\n\t * \r\n\t * let numberInput:NumberInput = new NumberInput(5)\r\n\t *     .setMax(10);\r\n\t * \r\n\t * @param {number} value Valor máximo do campo.\r\n\t * @return {NumberInput}\r\n\t */\r\n\tpublic setMax(value:number):this{\r\n\t\tthis.getInput().attr(\"max\",value);\r\n\t\treturn this;\r\n\t}\r\n\t/**\r\n\t * Alterar o valor de acréscimo e decréscimo do campo.\r\n\t * \r\n\t * @example\r\n\t * \r\n\t * let numberInput:NumberInput = new NumberInput(2)\r\n\t *     .setStep(1);\r\n\t * \r\n\t * @param {number} value Valor de acréscimo e decréscimo do campo.\r\n\t * @return {NumberInput}\r\n\t */\r\n\tpublic setStep(value:number):this{\r\n\t\tthis.getInput().attr(\"step\",value);\r\n\t\treturn this;\r\n\t}\r\n\tprotected encode(value: number): string {\r\n\t\treturn value && value.toString();\r\n\t}\r\n\r\n\tprotected decode(value: string): number {\r\n\t\treturn value && parseFloat(value);\r\n\t}\r\n}\r\n"]}