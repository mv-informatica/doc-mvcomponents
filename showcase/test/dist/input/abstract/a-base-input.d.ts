import { EMouseEvent } from "../../component/enum/e-mouse-event";
import { EKeyboardEvent } from "../../component/enum/e-keyboard-event";
import { EInputEvent } from "../../component/enum/e-input-event";
import { AVisualComponent } from "../../component/abstract/a-visual-component";
import { IInput } from "../interface/i-input";
import { IEvent } from "../../component/interface/i-event";
import { IAsyncValidation, ISyncValidation } from '../../core/interface/i-validation';
import { IValidator } from '../../core/interface/i-validator';
import { IConfigurable } from '../../core/interface/i-configurable';
export declare abstract class ABaseInput<T> extends AVisualComponent implements IInput<T>, IConfigurable {
    validator: IValidator<T>;
    private dirty;
    private valid;
    private defaultValue;
    private cleanable;
    private notEmptyValidation;
    constructor(tag: string, content?: string);
    attached(): void;
    configure(method: (scope: this) => any): this;
    protected onValidate(errors: string[]): void;
    addValidation(...validations: ISyncValidation<T>[]): this;
    removeValidation(...validations: ISyncValidation<T>[]): this;
    addAsyncValidation(...validations: IAsyncValidation<T>[]): this;
    protected onValueChange(value: T): void;
    markInvalid(invalid: boolean): this;
    isDirty(): boolean;
    setDirty(dirty: boolean): this;
    fireEvent(type: EMouseEvent | EKeyboardEvent | EInputEvent, ...params: any[]): IEvent;
    addEvent(type: EMouseEvent | EKeyboardEvent | EInputEvent, event_fn: (eventObject?: JQueryEventObject) => any): void;
    removeEvent(type: EMouseEvent | EKeyboardEvent | EInputEvent, callback?: (eventObject?: JQueryEventObject) => any): void;
    protected abstract getInput(): JQuery;
    focus(): this;
    setLabel(label: string): this;
    getLabel(): string;
    setReadonly(on: boolean): this;
    isReadonly(): boolean;
    abstract getValue(): T;
    setCleanable(on: boolean): this;
    isCleanable(): boolean;
    abstract setValue(value: T): this;
    isDisabled(): boolean;
    setDisabled(disabled: boolean): this;
    setEnable(enable: boolean): this;
    isValid(): boolean;
    setName(name: string): this;
    getName(): string;
    validate(): Promise<string[]>;
    setDefaultValue(value: T): this;
    getDefaultValue(): T;
    reset(): this;
    markRequired(required: boolean): this;
    setRequired(required: boolean): this;
    getRequired(): boolean;
}
